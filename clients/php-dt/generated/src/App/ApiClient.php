<?php
declare(strict_types=1);

namespace App;

use Articus\DataTransfer as DT;
use OpenAPIGenerator\APIClient as OAGAC;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * The version of the OpenAPI document: 20220523
 */
class ApiClient extends OAGAC\AbstractApiClient
{
    //region abilityList
    /**
     * @param \App\DTO\AbilityListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function abilityListRaw(
        \App\DTO\AbilityListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/ability/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\AbilityListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function abilityList(
        \App\DTO\AbilityListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->abilityListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\AbilityListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function abilityListResult(
        \App\DTO\AbilityListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->abilityList($parameters, $responseMediaType));
    }
    //endregion

    //region abilityRead
    /**
     * @param \App\DTO\AbilityReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function abilityReadRaw(
        \App\DTO\AbilityReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/ability/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\AbilityReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function abilityRead(
        \App\DTO\AbilityReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->abilityReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\AbilityReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function abilityReadResult(
        \App\DTO\AbilityReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->abilityRead($parameters, $responseMediaType));
    }
    //endregion

    //region berryFirmnessList
    /**
     * @param \App\DTO\BerryFirmnessListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function berryFirmnessListRaw(
        \App\DTO\BerryFirmnessListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/berry-firmness/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\BerryFirmnessListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function berryFirmnessList(
        \App\DTO\BerryFirmnessListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->berryFirmnessListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\BerryFirmnessListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function berryFirmnessListResult(
        \App\DTO\BerryFirmnessListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->berryFirmnessList($parameters, $responseMediaType));
    }
    //endregion

    //region berryFirmnessRead
    /**
     * @param \App\DTO\BerryFirmnessReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function berryFirmnessReadRaw(
        \App\DTO\BerryFirmnessReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/berry-firmness/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\BerryFirmnessReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function berryFirmnessRead(
        \App\DTO\BerryFirmnessReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->berryFirmnessReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\BerryFirmnessReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function berryFirmnessReadResult(
        \App\DTO\BerryFirmnessReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->berryFirmnessRead($parameters, $responseMediaType));
    }
    //endregion

    //region berryFlavorList
    /**
     * @param \App\DTO\BerryFlavorListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function berryFlavorListRaw(
        \App\DTO\BerryFlavorListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/berry-flavor/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\BerryFlavorListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function berryFlavorList(
        \App\DTO\BerryFlavorListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->berryFlavorListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\BerryFlavorListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function berryFlavorListResult(
        \App\DTO\BerryFlavorListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->berryFlavorList($parameters, $responseMediaType));
    }
    //endregion

    //region berryFlavorRead
    /**
     * @param \App\DTO\BerryFlavorReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function berryFlavorReadRaw(
        \App\DTO\BerryFlavorReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/berry-flavor/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\BerryFlavorReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function berryFlavorRead(
        \App\DTO\BerryFlavorReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->berryFlavorReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\BerryFlavorReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function berryFlavorReadResult(
        \App\DTO\BerryFlavorReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->berryFlavorRead($parameters, $responseMediaType));
    }
    //endregion

    //region berryList
    /**
     * @param \App\DTO\BerryListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function berryListRaw(
        \App\DTO\BerryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/berry/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\BerryListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function berryList(
        \App\DTO\BerryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->berryListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\BerryListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function berryListResult(
        \App\DTO\BerryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->berryList($parameters, $responseMediaType));
    }
    //endregion

    //region berryRead
    /**
     * @param \App\DTO\BerryReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function berryReadRaw(
        \App\DTO\BerryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/berry/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\BerryReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function berryRead(
        \App\DTO\BerryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->berryReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\BerryReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function berryReadResult(
        \App\DTO\BerryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->berryRead($parameters, $responseMediaType));
    }
    //endregion

    //region characteristicList
    /**
     * @param \App\DTO\CharacteristicListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function characteristicListRaw(
        \App\DTO\CharacteristicListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/characteristic/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\CharacteristicListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function characteristicList(
        \App\DTO\CharacteristicListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->characteristicListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\CharacteristicListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function characteristicListResult(
        \App\DTO\CharacteristicListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->characteristicList($parameters, $responseMediaType));
    }
    //endregion

    //region characteristicRead
    /**
     * @param \App\DTO\CharacteristicReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function characteristicReadRaw(
        \App\DTO\CharacteristicReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/characteristic/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\CharacteristicReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function characteristicRead(
        \App\DTO\CharacteristicReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->characteristicReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\CharacteristicReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function characteristicReadResult(
        \App\DTO\CharacteristicReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->characteristicRead($parameters, $responseMediaType));
    }
    //endregion

    //region contestEffectList
    /**
     * @param \App\DTO\ContestEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function contestEffectListRaw(
        \App\DTO\ContestEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/contest-effect/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ContestEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function contestEffectList(
        \App\DTO\ContestEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->contestEffectListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ContestEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function contestEffectListResult(
        \App\DTO\ContestEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->contestEffectList($parameters, $responseMediaType));
    }
    //endregion

    //region contestEffectRead
    /**
     * @param \App\DTO\ContestEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function contestEffectReadRaw(
        \App\DTO\ContestEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/contest-effect/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ContestEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function contestEffectRead(
        \App\DTO\ContestEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->contestEffectReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ContestEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function contestEffectReadResult(
        \App\DTO\ContestEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->contestEffectRead($parameters, $responseMediaType));
    }
    //endregion

    //region contestTypeList
    /**
     * @param \App\DTO\ContestTypeListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function contestTypeListRaw(
        \App\DTO\ContestTypeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/contest-type/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ContestTypeListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function contestTypeList(
        \App\DTO\ContestTypeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->contestTypeListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ContestTypeListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function contestTypeListResult(
        \App\DTO\ContestTypeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->contestTypeList($parameters, $responseMediaType));
    }
    //endregion

    //region contestTypeRead
    /**
     * @param \App\DTO\ContestTypeReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function contestTypeReadRaw(
        \App\DTO\ContestTypeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/contest-type/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ContestTypeReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function contestTypeRead(
        \App\DTO\ContestTypeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->contestTypeReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ContestTypeReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function contestTypeReadResult(
        \App\DTO\ContestTypeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->contestTypeRead($parameters, $responseMediaType));
    }
    //endregion

    //region eggGroupList
    /**
     * @param \App\DTO\EggGroupListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function eggGroupListRaw(
        \App\DTO\EggGroupListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/egg-group/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EggGroupListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function eggGroupList(
        \App\DTO\EggGroupListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->eggGroupListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EggGroupListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function eggGroupListResult(
        \App\DTO\EggGroupListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->eggGroupList($parameters, $responseMediaType));
    }
    //endregion

    //region eggGroupRead
    /**
     * @param \App\DTO\EggGroupReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function eggGroupReadRaw(
        \App\DTO\EggGroupReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/egg-group/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EggGroupReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function eggGroupRead(
        \App\DTO\EggGroupReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->eggGroupReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EggGroupReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function eggGroupReadResult(
        \App\DTO\EggGroupReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->eggGroupRead($parameters, $responseMediaType));
    }
    //endregion

    //region encounterConditionList
    /**
     * @param \App\DTO\EncounterConditionListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function encounterConditionListRaw(
        \App\DTO\EncounterConditionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/encounter-condition/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EncounterConditionListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function encounterConditionList(
        \App\DTO\EncounterConditionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->encounterConditionListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EncounterConditionListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function encounterConditionListResult(
        \App\DTO\EncounterConditionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->encounterConditionList($parameters, $responseMediaType));
    }
    //endregion

    //region encounterConditionRead
    /**
     * @param \App\DTO\EncounterConditionReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function encounterConditionReadRaw(
        \App\DTO\EncounterConditionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/encounter-condition/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EncounterConditionReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function encounterConditionRead(
        \App\DTO\EncounterConditionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->encounterConditionReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EncounterConditionReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function encounterConditionReadResult(
        \App\DTO\EncounterConditionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->encounterConditionRead($parameters, $responseMediaType));
    }
    //endregion

    //region encounterConditionValueList
    /**
     * @param \App\DTO\EncounterConditionValueListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function encounterConditionValueListRaw(
        \App\DTO\EncounterConditionValueListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/encounter-condition-value/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EncounterConditionValueListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function encounterConditionValueList(
        \App\DTO\EncounterConditionValueListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->encounterConditionValueListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EncounterConditionValueListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function encounterConditionValueListResult(
        \App\DTO\EncounterConditionValueListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->encounterConditionValueList($parameters, $responseMediaType));
    }
    //endregion

    //region encounterConditionValueRead
    /**
     * @param \App\DTO\EncounterConditionValueReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function encounterConditionValueReadRaw(
        \App\DTO\EncounterConditionValueReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/encounter-condition-value/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EncounterConditionValueReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function encounterConditionValueRead(
        \App\DTO\EncounterConditionValueReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->encounterConditionValueReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EncounterConditionValueReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function encounterConditionValueReadResult(
        \App\DTO\EncounterConditionValueReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->encounterConditionValueRead($parameters, $responseMediaType));
    }
    //endregion

    //region encounterMethodList
    /**
     * @param \App\DTO\EncounterMethodListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function encounterMethodListRaw(
        \App\DTO\EncounterMethodListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/encounter-method/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EncounterMethodListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function encounterMethodList(
        \App\DTO\EncounterMethodListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->encounterMethodListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EncounterMethodListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function encounterMethodListResult(
        \App\DTO\EncounterMethodListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->encounterMethodList($parameters, $responseMediaType));
    }
    //endregion

    //region encounterMethodRead
    /**
     * @param \App\DTO\EncounterMethodReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function encounterMethodReadRaw(
        \App\DTO\EncounterMethodReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/encounter-method/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EncounterMethodReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function encounterMethodRead(
        \App\DTO\EncounterMethodReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->encounterMethodReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EncounterMethodReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function encounterMethodReadResult(
        \App\DTO\EncounterMethodReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->encounterMethodRead($parameters, $responseMediaType));
    }
    //endregion

    //region evolutionChainList
    /**
     * @param \App\DTO\EvolutionChainListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function evolutionChainListRaw(
        \App\DTO\EvolutionChainListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/evolution-chain/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EvolutionChainListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function evolutionChainList(
        \App\DTO\EvolutionChainListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->evolutionChainListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EvolutionChainListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function evolutionChainListResult(
        \App\DTO\EvolutionChainListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->evolutionChainList($parameters, $responseMediaType));
    }
    //endregion

    //region evolutionChainRead
    /**
     * @param \App\DTO\EvolutionChainReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function evolutionChainReadRaw(
        \App\DTO\EvolutionChainReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/evolution-chain/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EvolutionChainReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function evolutionChainRead(
        \App\DTO\EvolutionChainReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->evolutionChainReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EvolutionChainReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function evolutionChainReadResult(
        \App\DTO\EvolutionChainReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->evolutionChainRead($parameters, $responseMediaType));
    }
    //endregion

    //region evolutionTriggerList
    /**
     * @param \App\DTO\EvolutionTriggerListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function evolutionTriggerListRaw(
        \App\DTO\EvolutionTriggerListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/evolution-trigger/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EvolutionTriggerListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function evolutionTriggerList(
        \App\DTO\EvolutionTriggerListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->evolutionTriggerListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EvolutionTriggerListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function evolutionTriggerListResult(
        \App\DTO\EvolutionTriggerListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->evolutionTriggerList($parameters, $responseMediaType));
    }
    //endregion

    //region evolutionTriggerRead
    /**
     * @param \App\DTO\EvolutionTriggerReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function evolutionTriggerReadRaw(
        \App\DTO\EvolutionTriggerReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/evolution-trigger/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\EvolutionTriggerReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function evolutionTriggerRead(
        \App\DTO\EvolutionTriggerReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->evolutionTriggerReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\EvolutionTriggerReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function evolutionTriggerReadResult(
        \App\DTO\EvolutionTriggerReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->evolutionTriggerRead($parameters, $responseMediaType));
    }
    //endregion

    //region genderList
    /**
     * @param \App\DTO\GenderListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function genderListRaw(
        \App\DTO\GenderListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/gender/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\GenderListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function genderList(
        \App\DTO\GenderListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->genderListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\GenderListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function genderListResult(
        \App\DTO\GenderListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->genderList($parameters, $responseMediaType));
    }
    //endregion

    //region genderRead
    /**
     * @param \App\DTO\GenderReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function genderReadRaw(
        \App\DTO\GenderReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/gender/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\GenderReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function genderRead(
        \App\DTO\GenderReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->genderReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\GenderReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function genderReadResult(
        \App\DTO\GenderReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->genderRead($parameters, $responseMediaType));
    }
    //endregion

    //region generationList
    /**
     * @param \App\DTO\GenerationListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generationListRaw(
        \App\DTO\GenerationListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/generation/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\GenerationListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generationList(
        \App\DTO\GenerationListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->generationListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\GenerationListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generationListResult(
        \App\DTO\GenerationListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generationList($parameters, $responseMediaType));
    }
    //endregion

    //region generationRead
    /**
     * @param \App\DTO\GenerationReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function generationReadRaw(
        \App\DTO\GenerationReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/generation/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\GenerationReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function generationRead(
        \App\DTO\GenerationReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->generationReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\GenerationReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function generationReadResult(
        \App\DTO\GenerationReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->generationRead($parameters, $responseMediaType));
    }
    //endregion

    //region growthRateList
    /**
     * @param \App\DTO\GrowthRateListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function growthRateListRaw(
        \App\DTO\GrowthRateListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/growth-rate/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\GrowthRateListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function growthRateList(
        \App\DTO\GrowthRateListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->growthRateListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\GrowthRateListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function growthRateListResult(
        \App\DTO\GrowthRateListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->growthRateList($parameters, $responseMediaType));
    }
    //endregion

    //region growthRateRead
    /**
     * @param \App\DTO\GrowthRateReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function growthRateReadRaw(
        \App\DTO\GrowthRateReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/growth-rate/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\GrowthRateReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function growthRateRead(
        \App\DTO\GrowthRateReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->growthRateReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\GrowthRateReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function growthRateReadResult(
        \App\DTO\GrowthRateReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->growthRateRead($parameters, $responseMediaType));
    }
    //endregion

    //region itemAttributeList
    /**
     * @param \App\DTO\ItemAttributeListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemAttributeListRaw(
        \App\DTO\ItemAttributeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-attribute/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemAttributeListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemAttributeList(
        \App\DTO\ItemAttributeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemAttributeListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemAttributeListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemAttributeListResult(
        \App\DTO\ItemAttributeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemAttributeList($parameters, $responseMediaType));
    }
    //endregion

    //region itemAttributeRead
    /**
     * @param \App\DTO\ItemAttributeReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemAttributeReadRaw(
        \App\DTO\ItemAttributeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-attribute/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemAttributeReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemAttributeRead(
        \App\DTO\ItemAttributeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemAttributeReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemAttributeReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemAttributeReadResult(
        \App\DTO\ItemAttributeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemAttributeRead($parameters, $responseMediaType));
    }
    //endregion

    //region itemCategoryList
    /**
     * @param \App\DTO\ItemCategoryListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemCategoryListRaw(
        \App\DTO\ItemCategoryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-category/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemCategoryListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemCategoryList(
        \App\DTO\ItemCategoryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemCategoryListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemCategoryListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemCategoryListResult(
        \App\DTO\ItemCategoryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemCategoryList($parameters, $responseMediaType));
    }
    //endregion

    //region itemCategoryRead
    /**
     * @param \App\DTO\ItemCategoryReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemCategoryReadRaw(
        \App\DTO\ItemCategoryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-category/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemCategoryReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemCategoryRead(
        \App\DTO\ItemCategoryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemCategoryReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemCategoryReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemCategoryReadResult(
        \App\DTO\ItemCategoryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemCategoryRead($parameters, $responseMediaType));
    }
    //endregion

    //region itemFlingEffectList
    /**
     * @param \App\DTO\ItemFlingEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemFlingEffectListRaw(
        \App\DTO\ItemFlingEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-fling-effect/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemFlingEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemFlingEffectList(
        \App\DTO\ItemFlingEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemFlingEffectListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemFlingEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemFlingEffectListResult(
        \App\DTO\ItemFlingEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemFlingEffectList($parameters, $responseMediaType));
    }
    //endregion

    //region itemFlingEffectRead
    /**
     * @param \App\DTO\ItemFlingEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemFlingEffectReadRaw(
        \App\DTO\ItemFlingEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-fling-effect/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemFlingEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemFlingEffectRead(
        \App\DTO\ItemFlingEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemFlingEffectReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemFlingEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemFlingEffectReadResult(
        \App\DTO\ItemFlingEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemFlingEffectRead($parameters, $responseMediaType));
    }
    //endregion

    //region itemList
    /**
     * @param \App\DTO\ItemListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemListRaw(
        \App\DTO\ItemListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemList(
        \App\DTO\ItemListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemListResult(
        \App\DTO\ItemListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemList($parameters, $responseMediaType));
    }
    //endregion

    //region itemPocketList
    /**
     * @param \App\DTO\ItemPocketListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemPocketListRaw(
        \App\DTO\ItemPocketListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-pocket/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemPocketListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemPocketList(
        \App\DTO\ItemPocketListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemPocketListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemPocketListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemPocketListResult(
        \App\DTO\ItemPocketListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemPocketList($parameters, $responseMediaType));
    }
    //endregion

    //region itemPocketRead
    /**
     * @param \App\DTO\ItemPocketReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemPocketReadRaw(
        \App\DTO\ItemPocketReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item-pocket/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemPocketReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemPocketRead(
        \App\DTO\ItemPocketReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemPocketReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemPocketReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemPocketReadResult(
        \App\DTO\ItemPocketReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemPocketRead($parameters, $responseMediaType));
    }
    //endregion

    //region itemRead
    /**
     * @param \App\DTO\ItemReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function itemReadRaw(
        \App\DTO\ItemReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/item/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\ItemReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function itemRead(
        \App\DTO\ItemReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->itemReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\ItemReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function itemReadResult(
        \App\DTO\ItemReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->itemRead($parameters, $responseMediaType));
    }
    //endregion

    //region languageList
    /**
     * @param \App\DTO\LanguageListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function languageListRaw(
        \App\DTO\LanguageListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/language/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\LanguageListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function languageList(
        \App\DTO\LanguageListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->languageListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\LanguageListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function languageListResult(
        \App\DTO\LanguageListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->languageList($parameters, $responseMediaType));
    }
    //endregion

    //region languageRead
    /**
     * @param \App\DTO\LanguageReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function languageReadRaw(
        \App\DTO\LanguageReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/language/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\LanguageReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function languageRead(
        \App\DTO\LanguageReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->languageReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\LanguageReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function languageReadResult(
        \App\DTO\LanguageReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->languageRead($parameters, $responseMediaType));
    }
    //endregion

    //region locationAreaList
    /**
     * @param \App\DTO\LocationAreaListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function locationAreaListRaw(
        \App\DTO\LocationAreaListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/location-area/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\LocationAreaListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function locationAreaList(
        \App\DTO\LocationAreaListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->locationAreaListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\LocationAreaListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function locationAreaListResult(
        \App\DTO\LocationAreaListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->locationAreaList($parameters, $responseMediaType));
    }
    //endregion

    //region locationAreaRead
    /**
     * @param \App\DTO\LocationAreaReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function locationAreaReadRaw(
        \App\DTO\LocationAreaReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/location-area/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\LocationAreaReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function locationAreaRead(
        \App\DTO\LocationAreaReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->locationAreaReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\LocationAreaReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function locationAreaReadResult(
        \App\DTO\LocationAreaReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->locationAreaRead($parameters, $responseMediaType));
    }
    //endregion

    //region locationList
    /**
     * @param \App\DTO\LocationListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function locationListRaw(
        \App\DTO\LocationListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/location/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\LocationListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function locationList(
        \App\DTO\LocationListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->locationListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\LocationListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function locationListResult(
        \App\DTO\LocationListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->locationList($parameters, $responseMediaType));
    }
    //endregion

    //region locationRead
    /**
     * @param \App\DTO\LocationReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function locationReadRaw(
        \App\DTO\LocationReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/location/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\LocationReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function locationRead(
        \App\DTO\LocationReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->locationReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\LocationReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function locationReadResult(
        \App\DTO\LocationReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->locationRead($parameters, $responseMediaType));
    }
    //endregion

    //region machineList
    /**
     * @param \App\DTO\MachineListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function machineListRaw(
        \App\DTO\MachineListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/machine/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MachineListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function machineList(
        \App\DTO\MachineListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->machineListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MachineListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function machineListResult(
        \App\DTO\MachineListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->machineList($parameters, $responseMediaType));
    }
    //endregion

    //region machineRead
    /**
     * @param \App\DTO\MachineReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function machineReadRaw(
        \App\DTO\MachineReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/machine/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MachineReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function machineRead(
        \App\DTO\MachineReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->machineReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MachineReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function machineReadResult(
        \App\DTO\MachineReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->machineRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveAilmentList
    /**
     * @param \App\DTO\MoveAilmentListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveAilmentListRaw(
        \App\DTO\MoveAilmentListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-ailment/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveAilmentListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveAilmentList(
        \App\DTO\MoveAilmentListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveAilmentListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveAilmentListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveAilmentListResult(
        \App\DTO\MoveAilmentListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveAilmentList($parameters, $responseMediaType));
    }
    //endregion

    //region moveAilmentRead
    /**
     * @param \App\DTO\MoveAilmentReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveAilmentReadRaw(
        \App\DTO\MoveAilmentReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-ailment/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveAilmentReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveAilmentRead(
        \App\DTO\MoveAilmentReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveAilmentReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveAilmentReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveAilmentReadResult(
        \App\DTO\MoveAilmentReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveAilmentRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveBattleStyleList
    /**
     * @param \App\DTO\MoveBattleStyleListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveBattleStyleListRaw(
        \App\DTO\MoveBattleStyleListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-battle-style/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveBattleStyleListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveBattleStyleList(
        \App\DTO\MoveBattleStyleListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveBattleStyleListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveBattleStyleListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveBattleStyleListResult(
        \App\DTO\MoveBattleStyleListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveBattleStyleList($parameters, $responseMediaType));
    }
    //endregion

    //region moveBattleStyleRead
    /**
     * @param \App\DTO\MoveBattleStyleReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveBattleStyleReadRaw(
        \App\DTO\MoveBattleStyleReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-battle-style/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveBattleStyleReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveBattleStyleRead(
        \App\DTO\MoveBattleStyleReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveBattleStyleReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveBattleStyleReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveBattleStyleReadResult(
        \App\DTO\MoveBattleStyleReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveBattleStyleRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveCategoryList
    /**
     * @param \App\DTO\MoveCategoryListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveCategoryListRaw(
        \App\DTO\MoveCategoryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-category/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveCategoryListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveCategoryList(
        \App\DTO\MoveCategoryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveCategoryListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveCategoryListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveCategoryListResult(
        \App\DTO\MoveCategoryListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveCategoryList($parameters, $responseMediaType));
    }
    //endregion

    //region moveCategoryRead
    /**
     * @param \App\DTO\MoveCategoryReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveCategoryReadRaw(
        \App\DTO\MoveCategoryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-category/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveCategoryReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveCategoryRead(
        \App\DTO\MoveCategoryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveCategoryReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveCategoryReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveCategoryReadResult(
        \App\DTO\MoveCategoryReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveCategoryRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveDamageClassList
    /**
     * @param \App\DTO\MoveDamageClassListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveDamageClassListRaw(
        \App\DTO\MoveDamageClassListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-damage-class/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveDamageClassListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveDamageClassList(
        \App\DTO\MoveDamageClassListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveDamageClassListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveDamageClassListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveDamageClassListResult(
        \App\DTO\MoveDamageClassListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveDamageClassList($parameters, $responseMediaType));
    }
    //endregion

    //region moveDamageClassRead
    /**
     * @param \App\DTO\MoveDamageClassReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveDamageClassReadRaw(
        \App\DTO\MoveDamageClassReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-damage-class/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveDamageClassReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveDamageClassRead(
        \App\DTO\MoveDamageClassReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveDamageClassReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveDamageClassReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveDamageClassReadResult(
        \App\DTO\MoveDamageClassReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveDamageClassRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveLearnMethodList
    /**
     * @param \App\DTO\MoveLearnMethodListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveLearnMethodListRaw(
        \App\DTO\MoveLearnMethodListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-learn-method/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveLearnMethodListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveLearnMethodList(
        \App\DTO\MoveLearnMethodListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveLearnMethodListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveLearnMethodListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveLearnMethodListResult(
        \App\DTO\MoveLearnMethodListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveLearnMethodList($parameters, $responseMediaType));
    }
    //endregion

    //region moveLearnMethodRead
    /**
     * @param \App\DTO\MoveLearnMethodReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveLearnMethodReadRaw(
        \App\DTO\MoveLearnMethodReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-learn-method/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveLearnMethodReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveLearnMethodRead(
        \App\DTO\MoveLearnMethodReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveLearnMethodReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveLearnMethodReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveLearnMethodReadResult(
        \App\DTO\MoveLearnMethodReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveLearnMethodRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveList
    /**
     * @param \App\DTO\MoveListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveListRaw(
        \App\DTO\MoveListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveList(
        \App\DTO\MoveListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveListResult(
        \App\DTO\MoveListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveList($parameters, $responseMediaType));
    }
    //endregion

    //region moveRead
    /**
     * @param \App\DTO\MoveReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveReadRaw(
        \App\DTO\MoveReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveRead(
        \App\DTO\MoveReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveReadResult(
        \App\DTO\MoveReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveRead($parameters, $responseMediaType));
    }
    //endregion

    //region moveTargetList
    /**
     * @param \App\DTO\MoveTargetListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveTargetListRaw(
        \App\DTO\MoveTargetListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-target/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveTargetListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveTargetList(
        \App\DTO\MoveTargetListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveTargetListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveTargetListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveTargetListResult(
        \App\DTO\MoveTargetListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveTargetList($parameters, $responseMediaType));
    }
    //endregion

    //region moveTargetRead
    /**
     * @param \App\DTO\MoveTargetReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function moveTargetReadRaw(
        \App\DTO\MoveTargetReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/move-target/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\MoveTargetReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function moveTargetRead(
        \App\DTO\MoveTargetReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->moveTargetReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\MoveTargetReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function moveTargetReadResult(
        \App\DTO\MoveTargetReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->moveTargetRead($parameters, $responseMediaType));
    }
    //endregion

    //region natureList
    /**
     * @param \App\DTO\NatureListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function natureListRaw(
        \App\DTO\NatureListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/nature/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\NatureListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function natureList(
        \App\DTO\NatureListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->natureListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\NatureListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function natureListResult(
        \App\DTO\NatureListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->natureList($parameters, $responseMediaType));
    }
    //endregion

    //region natureRead
    /**
     * @param \App\DTO\NatureReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function natureReadRaw(
        \App\DTO\NatureReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/nature/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\NatureReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function natureRead(
        \App\DTO\NatureReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->natureReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\NatureReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function natureReadResult(
        \App\DTO\NatureReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->natureRead($parameters, $responseMediaType));
    }
    //endregion

    //region palParkAreaList
    /**
     * @param \App\DTO\PalParkAreaListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function palParkAreaListRaw(
        \App\DTO\PalParkAreaListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pal-park-area/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PalParkAreaListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function palParkAreaList(
        \App\DTO\PalParkAreaListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->palParkAreaListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PalParkAreaListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function palParkAreaListResult(
        \App\DTO\PalParkAreaListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->palParkAreaList($parameters, $responseMediaType));
    }
    //endregion

    //region palParkAreaRead
    /**
     * @param \App\DTO\PalParkAreaReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function palParkAreaReadRaw(
        \App\DTO\PalParkAreaReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pal-park-area/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PalParkAreaReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function palParkAreaRead(
        \App\DTO\PalParkAreaReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->palParkAreaReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PalParkAreaReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function palParkAreaReadResult(
        \App\DTO\PalParkAreaReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->palParkAreaRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokeathlonStatList
    /**
     * @param \App\DTO\PokeathlonStatListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokeathlonStatListRaw(
        \App\DTO\PokeathlonStatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokeathlon-stat/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokeathlonStatListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokeathlonStatList(
        \App\DTO\PokeathlonStatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokeathlonStatListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokeathlonStatListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokeathlonStatListResult(
        \App\DTO\PokeathlonStatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokeathlonStatList($parameters, $responseMediaType));
    }
    //endregion

    //region pokeathlonStatRead
    /**
     * @param \App\DTO\PokeathlonStatReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokeathlonStatReadRaw(
        \App\DTO\PokeathlonStatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokeathlon-stat/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokeathlonStatReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokeathlonStatRead(
        \App\DTO\PokeathlonStatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokeathlonStatReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokeathlonStatReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokeathlonStatReadResult(
        \App\DTO\PokeathlonStatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokeathlonStatRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokedexList
    /**
     * @param \App\DTO\PokedexListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokedexListRaw(
        \App\DTO\PokedexListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokedex/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokedexListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokedexList(
        \App\DTO\PokedexListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokedexListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokedexListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokedexListResult(
        \App\DTO\PokedexListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokedexList($parameters, $responseMediaType));
    }
    //endregion

    //region pokedexRead
    /**
     * @param \App\DTO\PokedexReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokedexReadRaw(
        \App\DTO\PokedexReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokedex/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokedexReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokedexRead(
        \App\DTO\PokedexReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokedexReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokedexReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokedexReadResult(
        \App\DTO\PokedexReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokedexRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonColorList
    /**
     * @param \App\DTO\PokemonColorListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonColorListRaw(
        \App\DTO\PokemonColorListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-color/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonColorListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonColorList(
        \App\DTO\PokemonColorListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonColorListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonColorListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonColorListResult(
        \App\DTO\PokemonColorListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonColorList($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonColorRead
    /**
     * @param \App\DTO\PokemonColorReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonColorReadRaw(
        \App\DTO\PokemonColorReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-color/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonColorReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonColorRead(
        \App\DTO\PokemonColorReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonColorReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonColorReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonColorReadResult(
        \App\DTO\PokemonColorReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonColorRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonFormList
    /**
     * @param \App\DTO\PokemonFormListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonFormListRaw(
        \App\DTO\PokemonFormListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-form/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonFormListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonFormList(
        \App\DTO\PokemonFormListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonFormListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonFormListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonFormListResult(
        \App\DTO\PokemonFormListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonFormList($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonFormRead
    /**
     * @param \App\DTO\PokemonFormReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonFormReadRaw(
        \App\DTO\PokemonFormReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-form/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonFormReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonFormRead(
        \App\DTO\PokemonFormReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonFormReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonFormReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonFormReadResult(
        \App\DTO\PokemonFormReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonFormRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonHabitatList
    /**
     * @param \App\DTO\PokemonHabitatListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonHabitatListRaw(
        \App\DTO\PokemonHabitatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-habitat/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonHabitatListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonHabitatList(
        \App\DTO\PokemonHabitatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonHabitatListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonHabitatListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonHabitatListResult(
        \App\DTO\PokemonHabitatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonHabitatList($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonHabitatRead
    /**
     * @param \App\DTO\PokemonHabitatReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonHabitatReadRaw(
        \App\DTO\PokemonHabitatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-habitat/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonHabitatReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonHabitatRead(
        \App\DTO\PokemonHabitatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonHabitatReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonHabitatReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonHabitatReadResult(
        \App\DTO\PokemonHabitatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonHabitatRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonList
    /**
     * @param \App\DTO\PokemonListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonListRaw(
        \App\DTO\PokemonListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonList(
        \App\DTO\PokemonListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonListResult(
        \App\DTO\PokemonListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonList($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonRead
    /**
     * @param \App\DTO\PokemonReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonReadRaw(
        \App\DTO\PokemonReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonRead(
        \App\DTO\PokemonReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonReadResult(
        \App\DTO\PokemonReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonShapeList
    /**
     * @param \App\DTO\PokemonShapeListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonShapeListRaw(
        \App\DTO\PokemonShapeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-shape/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonShapeListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonShapeList(
        \App\DTO\PokemonShapeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonShapeListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonShapeListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonShapeListResult(
        \App\DTO\PokemonShapeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonShapeList($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonShapeRead
    /**
     * @param \App\DTO\PokemonShapeReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonShapeReadRaw(
        \App\DTO\PokemonShapeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-shape/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonShapeReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonShapeRead(
        \App\DTO\PokemonShapeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonShapeReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonShapeReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonShapeReadResult(
        \App\DTO\PokemonShapeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonShapeRead($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonSpeciesList
    /**
     * @param \App\DTO\PokemonSpeciesListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonSpeciesListRaw(
        \App\DTO\PokemonSpeciesListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-species/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonSpeciesListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonSpeciesList(
        \App\DTO\PokemonSpeciesListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonSpeciesListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonSpeciesListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonSpeciesListResult(
        \App\DTO\PokemonSpeciesListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonSpeciesList($parameters, $responseMediaType));
    }
    //endregion

    //region pokemonSpeciesRead
    /**
     * @param \App\DTO\PokemonSpeciesReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function pokemonSpeciesReadRaw(
        \App\DTO\PokemonSpeciesReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/pokemon-species/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\PokemonSpeciesReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function pokemonSpeciesRead(
        \App\DTO\PokemonSpeciesReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->pokemonSpeciesReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\PokemonSpeciesReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function pokemonSpeciesReadResult(
        \App\DTO\PokemonSpeciesReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->pokemonSpeciesRead($parameters, $responseMediaType));
    }
    //endregion

    //region regionList
    /**
     * @param \App\DTO\RegionListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function regionListRaw(
        \App\DTO\RegionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/region/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\RegionListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function regionList(
        \App\DTO\RegionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->regionListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\RegionListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function regionListResult(
        \App\DTO\RegionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->regionList($parameters, $responseMediaType));
    }
    //endregion

    //region regionRead
    /**
     * @param \App\DTO\RegionReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function regionReadRaw(
        \App\DTO\RegionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/region/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\RegionReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function regionRead(
        \App\DTO\RegionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->regionReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\RegionReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function regionReadResult(
        \App\DTO\RegionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->regionRead($parameters, $responseMediaType));
    }
    //endregion

    //region statList
    /**
     * @param \App\DTO\StatListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function statListRaw(
        \App\DTO\StatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/stat/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\StatListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function statList(
        \App\DTO\StatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->statListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\StatListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function statListResult(
        \App\DTO\StatListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->statList($parameters, $responseMediaType));
    }
    //endregion

    //region statRead
    /**
     * @param \App\DTO\StatReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function statReadRaw(
        \App\DTO\StatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/stat/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\StatReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function statRead(
        \App\DTO\StatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->statReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\StatReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function statReadResult(
        \App\DTO\StatReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->statRead($parameters, $responseMediaType));
    }
    //endregion

    //region superContestEffectList
    /**
     * @param \App\DTO\SuperContestEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function superContestEffectListRaw(
        \App\DTO\SuperContestEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/super-contest-effect/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\SuperContestEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function superContestEffectList(
        \App\DTO\SuperContestEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->superContestEffectListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\SuperContestEffectListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function superContestEffectListResult(
        \App\DTO\SuperContestEffectListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->superContestEffectList($parameters, $responseMediaType));
    }
    //endregion

    //region superContestEffectRead
    /**
     * @param \App\DTO\SuperContestEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function superContestEffectReadRaw(
        \App\DTO\SuperContestEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/super-contest-effect/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\SuperContestEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function superContestEffectRead(
        \App\DTO\SuperContestEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->superContestEffectReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\SuperContestEffectReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function superContestEffectReadResult(
        \App\DTO\SuperContestEffectReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->superContestEffectRead($parameters, $responseMediaType));
    }
    //endregion

    //region typeList
    /**
     * @param \App\DTO\TypeListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function typeListRaw(
        \App\DTO\TypeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/type/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\TypeListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function typeList(
        \App\DTO\TypeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->typeListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\TypeListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function typeListResult(
        \App\DTO\TypeListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->typeList($parameters, $responseMediaType));
    }
    //endregion

    //region typeRead
    /**
     * @param \App\DTO\TypeReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function typeReadRaw(
        \App\DTO\TypeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/type/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\TypeReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function typeRead(
        \App\DTO\TypeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->typeReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\TypeReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function typeReadResult(
        \App\DTO\TypeReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->typeRead($parameters, $responseMediaType));
    }
    //endregion

    //region versionGroupList
    /**
     * @param \App\DTO\VersionGroupListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function versionGroupListRaw(
        \App\DTO\VersionGroupListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/version-group/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\VersionGroupListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function versionGroupList(
        \App\DTO\VersionGroupListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->versionGroupListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\VersionGroupListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function versionGroupListResult(
        \App\DTO\VersionGroupListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->versionGroupList($parameters, $responseMediaType));
    }
    //endregion

    //region versionGroupRead
    /**
     * @param \App\DTO\VersionGroupReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function versionGroupReadRaw(
        \App\DTO\VersionGroupReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/version-group/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\VersionGroupReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function versionGroupRead(
        \App\DTO\VersionGroupReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->versionGroupReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\VersionGroupReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function versionGroupReadResult(
        \App\DTO\VersionGroupReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->versionGroupRead($parameters, $responseMediaType));
    }
    //endregion

    //region versionList
    /**
     * @param \App\DTO\VersionListParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function versionListRaw(
        \App\DTO\VersionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/version/', [], $this->getQueryParameters($parameters));
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\VersionListParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function versionList(
        \App\DTO\VersionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->versionListRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\VersionListParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function versionListResult(
        \App\DTO\VersionListParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->versionList($parameters, $responseMediaType));
    }
    //endregion

    //region versionRead
    /**
     * @param \App\DTO\VersionReadParameterData $parameters
     * @param string $responseMediaType
     * @return ResponseInterface
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     */
    public function versionReadRaw(
        \App\DTO\VersionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): ResponseInterface
    {
        $request = $this->createRequest('GET', '/api/v2/version/{id}/', $this->getPathParameters($parameters), []);
        $request = $this->addAcceptHeader($request, $responseMediaType);
        return $this->httpClient->sendRequest($request);
    }

    /**
     * @param \App\DTO\VersionReadParameterData $parameters
     * @param string $responseMediaType
     * @return array
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     */
    public function versionRead(
        \App\DTO\VersionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): array
    {
        $response = $this->versionReadRaw($parameters, $responseMediaType);
        $responseContent = null;
        $contentStrategy = null;
        $contentValidator = null;
        switch ($response->getStatusCode())
        {
            default:
                /* Default response */
                break;
        }
        $this->parseBody($response, $responseContent, $contentStrategy, $contentValidator);
        return [$responseContent, $response->getHeaders(), $response->getStatusCode(), $response->getReasonPhrase()];
    }

    /**
     * @param \App\DTO\VersionReadParameterData $parameters
     * @param string $responseMediaType
     * @return string
     * @throws ClientExceptionInterface
     * @throws DT\Exception\InvalidData
     * @throws OAGAC\Exception\InvalidResponseBodySchema
     * @throws OAGAC\Exception\UnsuccessfulResponse
     */
    public function versionReadResult(
        \App\DTO\VersionReadParameterData $parameters,
        string $responseMediaType = 'text/plain'
    ): string
    {
        return $this->getSuccessfulContent(...$this->versionRead($parameters, $responseMediaType));
    }
    //endregion
}

