/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 20220523
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContestTypeAPIController binds http requests to an api service and writes the service results to the http response
type ContestTypeAPIController struct {
	service ContestTypeAPIServicer
	errorHandler ErrorHandler
}

// ContestTypeAPIOption for how the controller is set up.
type ContestTypeAPIOption func(*ContestTypeAPIController)

// WithContestTypeAPIErrorHandler inject ErrorHandler into controller
func WithContestTypeAPIErrorHandler(h ErrorHandler) ContestTypeAPIOption {
	return func(c *ContestTypeAPIController) {
		c.errorHandler = h
	}
}

// NewContestTypeAPIController creates a default api controller
func NewContestTypeAPIController(s ContestTypeAPIServicer, opts ...ContestTypeAPIOption) Router {
	controller := &ContestTypeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContestTypeAPIController
func (c *ContestTypeAPIController) Routes() Routes {
	return Routes{
		"ContestTypeList": Route{
			strings.ToUpper("Get"),
			"/api/v2/contest-type/",
			c.ContestTypeList,
		},
		"ContestTypeRead": Route{
			strings.ToUpper("Get"),
			"/api/v2/contest-type/{id}/",
			c.ContestTypeRead,
		},
	}
}

// ContestTypeList -
func (c *ContestTypeAPIController) ContestTypeList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.ContestTypeList(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContestTypeRead -
func (c *ContestTypeAPIController) ContestTypeRead(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ContestTypeRead(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
