/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 20220523
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// AbilityAPIRouter defines the required methods for binding the api requests to a responses for the AbilityAPI
// The AbilityAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AbilityAPIServicer to perform the required actions, then write the service results to the http response.
type AbilityAPIRouter interface {
	AbilityList(http.ResponseWriter, *http.Request)
	AbilityRead(http.ResponseWriter, *http.Request)
}
// BerryAPIRouter defines the required methods for binding the api requests to a responses for the BerryAPI
// The BerryAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BerryAPIServicer to perform the required actions, then write the service results to the http response.
type BerryAPIRouter interface {
	BerryList(http.ResponseWriter, *http.Request)
	BerryRead(http.ResponseWriter, *http.Request)
}
// BerryFirmnessAPIRouter defines the required methods for binding the api requests to a responses for the BerryFirmnessAPI
// The BerryFirmnessAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BerryFirmnessAPIServicer to perform the required actions, then write the service results to the http response.
type BerryFirmnessAPIRouter interface {
	BerryFirmnessList(http.ResponseWriter, *http.Request)
	BerryFirmnessRead(http.ResponseWriter, *http.Request)
}
// BerryFlavorAPIRouter defines the required methods for binding the api requests to a responses for the BerryFlavorAPI
// The BerryFlavorAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BerryFlavorAPIServicer to perform the required actions, then write the service results to the http response.
type BerryFlavorAPIRouter interface {
	BerryFlavorList(http.ResponseWriter, *http.Request)
	BerryFlavorRead(http.ResponseWriter, *http.Request)
}
// CharacteristicAPIRouter defines the required methods for binding the api requests to a responses for the CharacteristicAPI
// The CharacteristicAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CharacteristicAPIServicer to perform the required actions, then write the service results to the http response.
type CharacteristicAPIRouter interface {
	CharacteristicList(http.ResponseWriter, *http.Request)
	CharacteristicRead(http.ResponseWriter, *http.Request)
}
// ContestEffectAPIRouter defines the required methods for binding the api requests to a responses for the ContestEffectAPI
// The ContestEffectAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ContestEffectAPIServicer to perform the required actions, then write the service results to the http response.
type ContestEffectAPIRouter interface {
	ContestEffectList(http.ResponseWriter, *http.Request)
	ContestEffectRead(http.ResponseWriter, *http.Request)
}
// ContestTypeAPIRouter defines the required methods for binding the api requests to a responses for the ContestTypeAPI
// The ContestTypeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ContestTypeAPIServicer to perform the required actions, then write the service results to the http response.
type ContestTypeAPIRouter interface {
	ContestTypeList(http.ResponseWriter, *http.Request)
	ContestTypeRead(http.ResponseWriter, *http.Request)
}
// EggGroupAPIRouter defines the required methods for binding the api requests to a responses for the EggGroupAPI
// The EggGroupAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EggGroupAPIServicer to perform the required actions, then write the service results to the http response.
type EggGroupAPIRouter interface {
	EggGroupList(http.ResponseWriter, *http.Request)
	EggGroupRead(http.ResponseWriter, *http.Request)
}
// EncounterConditionAPIRouter defines the required methods for binding the api requests to a responses for the EncounterConditionAPI
// The EncounterConditionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EncounterConditionAPIServicer to perform the required actions, then write the service results to the http response.
type EncounterConditionAPIRouter interface {
	EncounterConditionList(http.ResponseWriter, *http.Request)
	EncounterConditionRead(http.ResponseWriter, *http.Request)
}
// EncounterConditionValueAPIRouter defines the required methods for binding the api requests to a responses for the EncounterConditionValueAPI
// The EncounterConditionValueAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EncounterConditionValueAPIServicer to perform the required actions, then write the service results to the http response.
type EncounterConditionValueAPIRouter interface {
	EncounterConditionValueList(http.ResponseWriter, *http.Request)
	EncounterConditionValueRead(http.ResponseWriter, *http.Request)
}
// EncounterMethodAPIRouter defines the required methods for binding the api requests to a responses for the EncounterMethodAPI
// The EncounterMethodAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EncounterMethodAPIServicer to perform the required actions, then write the service results to the http response.
type EncounterMethodAPIRouter interface {
	EncounterMethodList(http.ResponseWriter, *http.Request)
	EncounterMethodRead(http.ResponseWriter, *http.Request)
}
// EvolutionChainAPIRouter defines the required methods for binding the api requests to a responses for the EvolutionChainAPI
// The EvolutionChainAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EvolutionChainAPIServicer to perform the required actions, then write the service results to the http response.
type EvolutionChainAPIRouter interface {
	EvolutionChainList(http.ResponseWriter, *http.Request)
	EvolutionChainRead(http.ResponseWriter, *http.Request)
}
// EvolutionTriggerAPIRouter defines the required methods for binding the api requests to a responses for the EvolutionTriggerAPI
// The EvolutionTriggerAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EvolutionTriggerAPIServicer to perform the required actions, then write the service results to the http response.
type EvolutionTriggerAPIRouter interface {
	EvolutionTriggerList(http.ResponseWriter, *http.Request)
	EvolutionTriggerRead(http.ResponseWriter, *http.Request)
}
// GenderAPIRouter defines the required methods for binding the api requests to a responses for the GenderAPI
// The GenderAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GenderAPIServicer to perform the required actions, then write the service results to the http response.
type GenderAPIRouter interface {
	GenderList(http.ResponseWriter, *http.Request)
	GenderRead(http.ResponseWriter, *http.Request)
}
// GenerationAPIRouter defines the required methods for binding the api requests to a responses for the GenerationAPI
// The GenerationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GenerationAPIServicer to perform the required actions, then write the service results to the http response.
type GenerationAPIRouter interface {
	GenerationList(http.ResponseWriter, *http.Request)
	GenerationRead(http.ResponseWriter, *http.Request)
}
// GrowthRateAPIRouter defines the required methods for binding the api requests to a responses for the GrowthRateAPI
// The GrowthRateAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GrowthRateAPIServicer to perform the required actions, then write the service results to the http response.
type GrowthRateAPIRouter interface {
	GrowthRateList(http.ResponseWriter, *http.Request)
	GrowthRateRead(http.ResponseWriter, *http.Request)
}
// ItemAPIRouter defines the required methods for binding the api requests to a responses for the ItemAPI
// The ItemAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemAPIServicer to perform the required actions, then write the service results to the http response.
type ItemAPIRouter interface {
	ItemList(http.ResponseWriter, *http.Request)
	ItemRead(http.ResponseWriter, *http.Request)
}
// ItemAttributeAPIRouter defines the required methods for binding the api requests to a responses for the ItemAttributeAPI
// The ItemAttributeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemAttributeAPIServicer to perform the required actions, then write the service results to the http response.
type ItemAttributeAPIRouter interface {
	ItemAttributeList(http.ResponseWriter, *http.Request)
	ItemAttributeRead(http.ResponseWriter, *http.Request)
}
// ItemCategoryAPIRouter defines the required methods for binding the api requests to a responses for the ItemCategoryAPI
// The ItemCategoryAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemCategoryAPIServicer to perform the required actions, then write the service results to the http response.
type ItemCategoryAPIRouter interface {
	ItemCategoryList(http.ResponseWriter, *http.Request)
	ItemCategoryRead(http.ResponseWriter, *http.Request)
}
// ItemFlingEffectAPIRouter defines the required methods for binding the api requests to a responses for the ItemFlingEffectAPI
// The ItemFlingEffectAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemFlingEffectAPIServicer to perform the required actions, then write the service results to the http response.
type ItemFlingEffectAPIRouter interface {
	ItemFlingEffectList(http.ResponseWriter, *http.Request)
	ItemFlingEffectRead(http.ResponseWriter, *http.Request)
}
// ItemPocketAPIRouter defines the required methods for binding the api requests to a responses for the ItemPocketAPI
// The ItemPocketAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemPocketAPIServicer to perform the required actions, then write the service results to the http response.
type ItemPocketAPIRouter interface {
	ItemPocketList(http.ResponseWriter, *http.Request)
	ItemPocketRead(http.ResponseWriter, *http.Request)
}
// LanguageAPIRouter defines the required methods for binding the api requests to a responses for the LanguageAPI
// The LanguageAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LanguageAPIServicer to perform the required actions, then write the service results to the http response.
type LanguageAPIRouter interface {
	LanguageList(http.ResponseWriter, *http.Request)
	LanguageRead(http.ResponseWriter, *http.Request)
}
// LocationAPIRouter defines the required methods for binding the api requests to a responses for the LocationAPI
// The LocationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LocationAPIServicer to perform the required actions, then write the service results to the http response.
type LocationAPIRouter interface {
	LocationList(http.ResponseWriter, *http.Request)
	LocationRead(http.ResponseWriter, *http.Request)
}
// LocationAreaAPIRouter defines the required methods for binding the api requests to a responses for the LocationAreaAPI
// The LocationAreaAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LocationAreaAPIServicer to perform the required actions, then write the service results to the http response.
type LocationAreaAPIRouter interface {
	LocationAreaList(http.ResponseWriter, *http.Request)
	LocationAreaRead(http.ResponseWriter, *http.Request)
}
// MachineAPIRouter defines the required methods for binding the api requests to a responses for the MachineAPI
// The MachineAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MachineAPIServicer to perform the required actions, then write the service results to the http response.
type MachineAPIRouter interface {
	MachineList(http.ResponseWriter, *http.Request)
	MachineRead(http.ResponseWriter, *http.Request)
}
// MoveAPIRouter defines the required methods for binding the api requests to a responses for the MoveAPI
// The MoveAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveAPIServicer to perform the required actions, then write the service results to the http response.
type MoveAPIRouter interface {
	MoveList(http.ResponseWriter, *http.Request)
	MoveRead(http.ResponseWriter, *http.Request)
}
// MoveAilmentAPIRouter defines the required methods for binding the api requests to a responses for the MoveAilmentAPI
// The MoveAilmentAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveAilmentAPIServicer to perform the required actions, then write the service results to the http response.
type MoveAilmentAPIRouter interface {
	MoveAilmentList(http.ResponseWriter, *http.Request)
	MoveAilmentRead(http.ResponseWriter, *http.Request)
}
// MoveBattleStyleAPIRouter defines the required methods for binding the api requests to a responses for the MoveBattleStyleAPI
// The MoveBattleStyleAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveBattleStyleAPIServicer to perform the required actions, then write the service results to the http response.
type MoveBattleStyleAPIRouter interface {
	MoveBattleStyleList(http.ResponseWriter, *http.Request)
	MoveBattleStyleRead(http.ResponseWriter, *http.Request)
}
// MoveCategoryAPIRouter defines the required methods for binding the api requests to a responses for the MoveCategoryAPI
// The MoveCategoryAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveCategoryAPIServicer to perform the required actions, then write the service results to the http response.
type MoveCategoryAPIRouter interface {
	MoveCategoryList(http.ResponseWriter, *http.Request)
	MoveCategoryRead(http.ResponseWriter, *http.Request)
}
// MoveDamageClassAPIRouter defines the required methods for binding the api requests to a responses for the MoveDamageClassAPI
// The MoveDamageClassAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveDamageClassAPIServicer to perform the required actions, then write the service results to the http response.
type MoveDamageClassAPIRouter interface {
	MoveDamageClassList(http.ResponseWriter, *http.Request)
	MoveDamageClassRead(http.ResponseWriter, *http.Request)
}
// MoveLearnMethodAPIRouter defines the required methods for binding the api requests to a responses for the MoveLearnMethodAPI
// The MoveLearnMethodAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveLearnMethodAPIServicer to perform the required actions, then write the service results to the http response.
type MoveLearnMethodAPIRouter interface {
	MoveLearnMethodList(http.ResponseWriter, *http.Request)
	MoveLearnMethodRead(http.ResponseWriter, *http.Request)
}
// MoveTargetAPIRouter defines the required methods for binding the api requests to a responses for the MoveTargetAPI
// The MoveTargetAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoveTargetAPIServicer to perform the required actions, then write the service results to the http response.
type MoveTargetAPIRouter interface {
	MoveTargetList(http.ResponseWriter, *http.Request)
	MoveTargetRead(http.ResponseWriter, *http.Request)
}
// NatureAPIRouter defines the required methods for binding the api requests to a responses for the NatureAPI
// The NatureAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NatureAPIServicer to perform the required actions, then write the service results to the http response.
type NatureAPIRouter interface {
	NatureList(http.ResponseWriter, *http.Request)
	NatureRead(http.ResponseWriter, *http.Request)
}
// PalParkAreaAPIRouter defines the required methods for binding the api requests to a responses for the PalParkAreaAPI
// The PalParkAreaAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PalParkAreaAPIServicer to perform the required actions, then write the service results to the http response.
type PalParkAreaAPIRouter interface {
	PalParkAreaList(http.ResponseWriter, *http.Request)
	PalParkAreaRead(http.ResponseWriter, *http.Request)
}
// PokeathlonStatAPIRouter defines the required methods for binding the api requests to a responses for the PokeathlonStatAPI
// The PokeathlonStatAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokeathlonStatAPIServicer to perform the required actions, then write the service results to the http response.
type PokeathlonStatAPIRouter interface {
	PokeathlonStatList(http.ResponseWriter, *http.Request)
	PokeathlonStatRead(http.ResponseWriter, *http.Request)
}
// PokedexAPIRouter defines the required methods for binding the api requests to a responses for the PokedexAPI
// The PokedexAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokedexAPIServicer to perform the required actions, then write the service results to the http response.
type PokedexAPIRouter interface {
	PokedexList(http.ResponseWriter, *http.Request)
	PokedexRead(http.ResponseWriter, *http.Request)
}
// PokemonAPIRouter defines the required methods for binding the api requests to a responses for the PokemonAPI
// The PokemonAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonAPIServicer to perform the required actions, then write the service results to the http response.
type PokemonAPIRouter interface {
	PokemonList(http.ResponseWriter, *http.Request)
	PokemonRead(http.ResponseWriter, *http.Request)
}
// PokemonColorAPIRouter defines the required methods for binding the api requests to a responses for the PokemonColorAPI
// The PokemonColorAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonColorAPIServicer to perform the required actions, then write the service results to the http response.
type PokemonColorAPIRouter interface {
	PokemonColorList(http.ResponseWriter, *http.Request)
	PokemonColorRead(http.ResponseWriter, *http.Request)
}
// PokemonFormAPIRouter defines the required methods for binding the api requests to a responses for the PokemonFormAPI
// The PokemonFormAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonFormAPIServicer to perform the required actions, then write the service results to the http response.
type PokemonFormAPIRouter interface {
	PokemonFormList(http.ResponseWriter, *http.Request)
	PokemonFormRead(http.ResponseWriter, *http.Request)
}
// PokemonHabitatAPIRouter defines the required methods for binding the api requests to a responses for the PokemonHabitatAPI
// The PokemonHabitatAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonHabitatAPIServicer to perform the required actions, then write the service results to the http response.
type PokemonHabitatAPIRouter interface {
	PokemonHabitatList(http.ResponseWriter, *http.Request)
	PokemonHabitatRead(http.ResponseWriter, *http.Request)
}
// PokemonShapeAPIRouter defines the required methods for binding the api requests to a responses for the PokemonShapeAPI
// The PokemonShapeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonShapeAPIServicer to perform the required actions, then write the service results to the http response.
type PokemonShapeAPIRouter interface {
	PokemonShapeList(http.ResponseWriter, *http.Request)
	PokemonShapeRead(http.ResponseWriter, *http.Request)
}
// PokemonSpeciesAPIRouter defines the required methods for binding the api requests to a responses for the PokemonSpeciesAPI
// The PokemonSpeciesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PokemonSpeciesAPIServicer to perform the required actions, then write the service results to the http response.
type PokemonSpeciesAPIRouter interface {
	PokemonSpeciesList(http.ResponseWriter, *http.Request)
	PokemonSpeciesRead(http.ResponseWriter, *http.Request)
}
// RegionAPIRouter defines the required methods for binding the api requests to a responses for the RegionAPI
// The RegionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RegionAPIServicer to perform the required actions, then write the service results to the http response.
type RegionAPIRouter interface {
	RegionList(http.ResponseWriter, *http.Request)
	RegionRead(http.ResponseWriter, *http.Request)
}
// StatAPIRouter defines the required methods for binding the api requests to a responses for the StatAPI
// The StatAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatAPIServicer to perform the required actions, then write the service results to the http response.
type StatAPIRouter interface {
	StatList(http.ResponseWriter, *http.Request)
	StatRead(http.ResponseWriter, *http.Request)
}
// SuperContestEffectAPIRouter defines the required methods for binding the api requests to a responses for the SuperContestEffectAPI
// The SuperContestEffectAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SuperContestEffectAPIServicer to perform the required actions, then write the service results to the http response.
type SuperContestEffectAPIRouter interface {
	SuperContestEffectList(http.ResponseWriter, *http.Request)
	SuperContestEffectRead(http.ResponseWriter, *http.Request)
}
// TypeAPIRouter defines the required methods for binding the api requests to a responses for the TypeAPI
// The TypeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TypeAPIServicer to perform the required actions, then write the service results to the http response.
type TypeAPIRouter interface {
	TypeList(http.ResponseWriter, *http.Request)
	TypeRead(http.ResponseWriter, *http.Request)
}
// VersionAPIRouter defines the required methods for binding the api requests to a responses for the VersionAPI
// The VersionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VersionAPIServicer to perform the required actions, then write the service results to the http response.
type VersionAPIRouter interface {
	VersionList(http.ResponseWriter, *http.Request)
	VersionRead(http.ResponseWriter, *http.Request)
}
// VersionGroupAPIRouter defines the required methods for binding the api requests to a responses for the VersionGroupAPI
// The VersionGroupAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VersionGroupAPIServicer to perform the required actions, then write the service results to the http response.
type VersionGroupAPIRouter interface {
	VersionGroupList(http.ResponseWriter, *http.Request)
	VersionGroupRead(http.ResponseWriter, *http.Request)
}


// AbilityAPIServicer defines the api actions for the AbilityAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AbilityAPIServicer interface {
	AbilityList(context.Context, int32, int32) (ImplResponse, error)
	AbilityRead(context.Context, int32) (ImplResponse, error)
}


// BerryAPIServicer defines the api actions for the BerryAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BerryAPIServicer interface {
	BerryList(context.Context, int32, int32) (ImplResponse, error)
	BerryRead(context.Context, int32) (ImplResponse, error)
}


// BerryFirmnessAPIServicer defines the api actions for the BerryFirmnessAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BerryFirmnessAPIServicer interface {
	BerryFirmnessList(context.Context, int32, int32) (ImplResponse, error)
	BerryFirmnessRead(context.Context, int32) (ImplResponse, error)
}


// BerryFlavorAPIServicer defines the api actions for the BerryFlavorAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BerryFlavorAPIServicer interface {
	BerryFlavorList(context.Context, int32, int32) (ImplResponse, error)
	BerryFlavorRead(context.Context, int32) (ImplResponse, error)
}


// CharacteristicAPIServicer defines the api actions for the CharacteristicAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CharacteristicAPIServicer interface {
	CharacteristicList(context.Context, int32, int32) (ImplResponse, error)
	CharacteristicRead(context.Context, int32) (ImplResponse, error)
}


// ContestEffectAPIServicer defines the api actions for the ContestEffectAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ContestEffectAPIServicer interface {
	ContestEffectList(context.Context, int32, int32) (ImplResponse, error)
	ContestEffectRead(context.Context, int32) (ImplResponse, error)
}


// ContestTypeAPIServicer defines the api actions for the ContestTypeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ContestTypeAPIServicer interface {
	ContestTypeList(context.Context, int32, int32) (ImplResponse, error)
	ContestTypeRead(context.Context, int32) (ImplResponse, error)
}


// EggGroupAPIServicer defines the api actions for the EggGroupAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EggGroupAPIServicer interface {
	EggGroupList(context.Context, int32, int32) (ImplResponse, error)
	EggGroupRead(context.Context, int32) (ImplResponse, error)
}


// EncounterConditionAPIServicer defines the api actions for the EncounterConditionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EncounterConditionAPIServicer interface {
	EncounterConditionList(context.Context, int32, int32) (ImplResponse, error)
	EncounterConditionRead(context.Context, int32) (ImplResponse, error)
}


// EncounterConditionValueAPIServicer defines the api actions for the EncounterConditionValueAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EncounterConditionValueAPIServicer interface {
	EncounterConditionValueList(context.Context, int32, int32) (ImplResponse, error)
	EncounterConditionValueRead(context.Context, int32) (ImplResponse, error)
}


// EncounterMethodAPIServicer defines the api actions for the EncounterMethodAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EncounterMethodAPIServicer interface {
	EncounterMethodList(context.Context, int32, int32) (ImplResponse, error)
	EncounterMethodRead(context.Context, int32) (ImplResponse, error)
}


// EvolutionChainAPIServicer defines the api actions for the EvolutionChainAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EvolutionChainAPIServicer interface {
	EvolutionChainList(context.Context, int32, int32) (ImplResponse, error)
	EvolutionChainRead(context.Context, int32) (ImplResponse, error)
}


// EvolutionTriggerAPIServicer defines the api actions for the EvolutionTriggerAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EvolutionTriggerAPIServicer interface {
	EvolutionTriggerList(context.Context, int32, int32) (ImplResponse, error)
	EvolutionTriggerRead(context.Context, int32) (ImplResponse, error)
}


// GenderAPIServicer defines the api actions for the GenderAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GenderAPIServicer interface {
	GenderList(context.Context, int32, int32) (ImplResponse, error)
	GenderRead(context.Context, int32) (ImplResponse, error)
}


// GenerationAPIServicer defines the api actions for the GenerationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GenerationAPIServicer interface {
	GenerationList(context.Context, int32, int32) (ImplResponse, error)
	GenerationRead(context.Context, int32) (ImplResponse, error)
}


// GrowthRateAPIServicer defines the api actions for the GrowthRateAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GrowthRateAPIServicer interface {
	GrowthRateList(context.Context, int32, int32) (ImplResponse, error)
	GrowthRateRead(context.Context, int32) (ImplResponse, error)
}


// ItemAPIServicer defines the api actions for the ItemAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemAPIServicer interface {
	ItemList(context.Context, int32, int32) (ImplResponse, error)
	ItemRead(context.Context, int32) (ImplResponse, error)
}


// ItemAttributeAPIServicer defines the api actions for the ItemAttributeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemAttributeAPIServicer interface {
	ItemAttributeList(context.Context, int32, int32) (ImplResponse, error)
	ItemAttributeRead(context.Context, int32) (ImplResponse, error)
}


// ItemCategoryAPIServicer defines the api actions for the ItemCategoryAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemCategoryAPIServicer interface {
	ItemCategoryList(context.Context, int32, int32) (ImplResponse, error)
	ItemCategoryRead(context.Context, int32) (ImplResponse, error)
}


// ItemFlingEffectAPIServicer defines the api actions for the ItemFlingEffectAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemFlingEffectAPIServicer interface {
	ItemFlingEffectList(context.Context, int32, int32) (ImplResponse, error)
	ItemFlingEffectRead(context.Context, int32) (ImplResponse, error)
}


// ItemPocketAPIServicer defines the api actions for the ItemPocketAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemPocketAPIServicer interface {
	ItemPocketList(context.Context, int32, int32) (ImplResponse, error)
	ItemPocketRead(context.Context, int32) (ImplResponse, error)
}


// LanguageAPIServicer defines the api actions for the LanguageAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LanguageAPIServicer interface {
	LanguageList(context.Context, int32, int32) (ImplResponse, error)
	LanguageRead(context.Context, int32) (ImplResponse, error)
}


// LocationAPIServicer defines the api actions for the LocationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LocationAPIServicer interface {
	LocationList(context.Context, int32, int32) (ImplResponse, error)
	LocationRead(context.Context, int32) (ImplResponse, error)
}


// LocationAreaAPIServicer defines the api actions for the LocationAreaAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LocationAreaAPIServicer interface {
	LocationAreaList(context.Context, int32, int32) (ImplResponse, error)
	LocationAreaRead(context.Context, int32) (ImplResponse, error)
}


// MachineAPIServicer defines the api actions for the MachineAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MachineAPIServicer interface {
	MachineList(context.Context, int32, int32) (ImplResponse, error)
	MachineRead(context.Context, int32) (ImplResponse, error)
}


// MoveAPIServicer defines the api actions for the MoveAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveAPIServicer interface {
	MoveList(context.Context, int32, int32) (ImplResponse, error)
	MoveRead(context.Context, int32) (ImplResponse, error)
}


// MoveAilmentAPIServicer defines the api actions for the MoveAilmentAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveAilmentAPIServicer interface {
	MoveAilmentList(context.Context, int32, int32) (ImplResponse, error)
	MoveAilmentRead(context.Context, int32) (ImplResponse, error)
}


// MoveBattleStyleAPIServicer defines the api actions for the MoveBattleStyleAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveBattleStyleAPIServicer interface {
	MoveBattleStyleList(context.Context, int32, int32) (ImplResponse, error)
	MoveBattleStyleRead(context.Context, int32) (ImplResponse, error)
}


// MoveCategoryAPIServicer defines the api actions for the MoveCategoryAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveCategoryAPIServicer interface {
	MoveCategoryList(context.Context, int32, int32) (ImplResponse, error)
	MoveCategoryRead(context.Context, int32) (ImplResponse, error)
}


// MoveDamageClassAPIServicer defines the api actions for the MoveDamageClassAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveDamageClassAPIServicer interface {
	MoveDamageClassList(context.Context, int32, int32) (ImplResponse, error)
	MoveDamageClassRead(context.Context, int32) (ImplResponse, error)
}


// MoveLearnMethodAPIServicer defines the api actions for the MoveLearnMethodAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveLearnMethodAPIServicer interface {
	MoveLearnMethodList(context.Context, int32, int32) (ImplResponse, error)
	MoveLearnMethodRead(context.Context, int32) (ImplResponse, error)
}


// MoveTargetAPIServicer defines the api actions for the MoveTargetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoveTargetAPIServicer interface {
	MoveTargetList(context.Context, int32, int32) (ImplResponse, error)
	MoveTargetRead(context.Context, int32) (ImplResponse, error)
}


// NatureAPIServicer defines the api actions for the NatureAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NatureAPIServicer interface {
	NatureList(context.Context, int32, int32) (ImplResponse, error)
	NatureRead(context.Context, int32) (ImplResponse, error)
}


// PalParkAreaAPIServicer defines the api actions for the PalParkAreaAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PalParkAreaAPIServicer interface {
	PalParkAreaList(context.Context, int32, int32) (ImplResponse, error)
	PalParkAreaRead(context.Context, int32) (ImplResponse, error)
}


// PokeathlonStatAPIServicer defines the api actions for the PokeathlonStatAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokeathlonStatAPIServicer interface {
	PokeathlonStatList(context.Context, int32, int32) (ImplResponse, error)
	PokeathlonStatRead(context.Context, int32) (ImplResponse, error)
}


// PokedexAPIServicer defines the api actions for the PokedexAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokedexAPIServicer interface {
	PokedexList(context.Context, int32, int32) (ImplResponse, error)
	PokedexRead(context.Context, int32) (ImplResponse, error)
}


// PokemonAPIServicer defines the api actions for the PokemonAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonAPIServicer interface {
	PokemonList(context.Context, int32, int32) (ImplResponse, error)
	PokemonRead(context.Context, int32) (ImplResponse, error)
}


// PokemonColorAPIServicer defines the api actions for the PokemonColorAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonColorAPIServicer interface {
	PokemonColorList(context.Context, int32, int32) (ImplResponse, error)
	PokemonColorRead(context.Context, int32) (ImplResponse, error)
}


// PokemonFormAPIServicer defines the api actions for the PokemonFormAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonFormAPIServicer interface {
	PokemonFormList(context.Context, int32, int32) (ImplResponse, error)
	PokemonFormRead(context.Context, int32) (ImplResponse, error)
}


// PokemonHabitatAPIServicer defines the api actions for the PokemonHabitatAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonHabitatAPIServicer interface {
	PokemonHabitatList(context.Context, int32, int32) (ImplResponse, error)
	PokemonHabitatRead(context.Context, int32) (ImplResponse, error)
}


// PokemonShapeAPIServicer defines the api actions for the PokemonShapeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonShapeAPIServicer interface {
	PokemonShapeList(context.Context, int32, int32) (ImplResponse, error)
	PokemonShapeRead(context.Context, int32) (ImplResponse, error)
}


// PokemonSpeciesAPIServicer defines the api actions for the PokemonSpeciesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PokemonSpeciesAPIServicer interface {
	PokemonSpeciesList(context.Context, int32, int32) (ImplResponse, error)
	PokemonSpeciesRead(context.Context, int32) (ImplResponse, error)
}


// RegionAPIServicer defines the api actions for the RegionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RegionAPIServicer interface {
	RegionList(context.Context, int32, int32) (ImplResponse, error)
	RegionRead(context.Context, int32) (ImplResponse, error)
}


// StatAPIServicer defines the api actions for the StatAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatAPIServicer interface {
	StatList(context.Context, int32, int32) (ImplResponse, error)
	StatRead(context.Context, int32) (ImplResponse, error)
}


// SuperContestEffectAPIServicer defines the api actions for the SuperContestEffectAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SuperContestEffectAPIServicer interface {
	SuperContestEffectList(context.Context, int32, int32) (ImplResponse, error)
	SuperContestEffectRead(context.Context, int32) (ImplResponse, error)
}


// TypeAPIServicer defines the api actions for the TypeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TypeAPIServicer interface {
	TypeList(context.Context, int32, int32) (ImplResponse, error)
	TypeRead(context.Context, int32) (ImplResponse, error)
}


// VersionAPIServicer defines the api actions for the VersionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VersionAPIServicer interface {
	VersionList(context.Context, int32, int32) (ImplResponse, error)
	VersionRead(context.Context, int32) (ImplResponse, error)
}


// VersionGroupAPIServicer defines the api actions for the VersionGroupAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VersionGroupAPIServicer interface {
	VersionGroupList(context.Context, int32, int32) (ImplResponse, error)
	VersionGroupRead(context.Context, int32) (ImplResponse, error)
}
