// @flow
/* eslint-disable no-use-before-define */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://pokeapi.co".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}



/**
 * AbilityApi - fetch parameter creator
 * @export
 */
export const AbilityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        abilityList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/ability/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        abilityRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling abilityRead.');
            }
            const localVarPath = `/api/v2/ability/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AbilityApiType = {
    abilityList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    abilityRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * AbilityApi - factory function to inject configuration
 * @export
 */
export const AbilityApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AbilityApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        abilityList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = AbilityApiFetchParamCreator(configuration).abilityList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        abilityRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = AbilityApiFetchParamCreator(configuration).abilityRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BerryApi - fetch parameter creator
 * @export
 */
export const BerryApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        berryList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/berry/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        berryRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling berryRead.');
            }
            const localVarPath = `/api/v2/berry/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BerryApiType = {
    berryList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    berryRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * BerryApi - factory function to inject configuration
 * @export
 */
export const BerryApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BerryApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        berryList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = BerryApiFetchParamCreator(configuration).berryList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        berryRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = BerryApiFetchParamCreator(configuration).berryRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BerryFirmnessApi - fetch parameter creator
 * @export
 */
export const BerryFirmnessApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        berryFirmnessList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/berry-firmness/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        berryFirmnessRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling berryFirmnessRead.');
            }
            const localVarPath = `/api/v2/berry-firmness/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BerryFirmnessApiType = {
    berryFirmnessList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    berryFirmnessRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * BerryFirmnessApi - factory function to inject configuration
 * @export
 */
export const BerryFirmnessApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BerryFirmnessApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        berryFirmnessList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = BerryFirmnessApiFetchParamCreator(configuration).berryFirmnessList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        berryFirmnessRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = BerryFirmnessApiFetchParamCreator(configuration).berryFirmnessRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BerryFlavorApi - fetch parameter creator
 * @export
 */
export const BerryFlavorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        berryFlavorList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/berry-flavor/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        berryFlavorRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling berryFlavorRead.');
            }
            const localVarPath = `/api/v2/berry-flavor/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BerryFlavorApiType = {
    berryFlavorList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    berryFlavorRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * BerryFlavorApi - factory function to inject configuration
 * @export
 */
export const BerryFlavorApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BerryFlavorApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        berryFlavorList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = BerryFlavorApiFetchParamCreator(configuration).berryFlavorList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        berryFlavorRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = BerryFlavorApiFetchParamCreator(configuration).berryFlavorRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CharacteristicApi - fetch parameter creator
 * @export
 */
export const CharacteristicApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        characteristicList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/characteristic/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        characteristicRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling characteristicRead.');
            }
            const localVarPath = `/api/v2/characteristic/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CharacteristicApiType = {
    characteristicList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    characteristicRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * CharacteristicApi - factory function to inject configuration
 * @export
 */
export const CharacteristicApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CharacteristicApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        characteristicList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = CharacteristicApiFetchParamCreator(configuration).characteristicList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        characteristicRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = CharacteristicApiFetchParamCreator(configuration).characteristicRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ContestEffectApi - fetch parameter creator
 * @export
 */
export const ContestEffectApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        contestEffectList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/contest-effect/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        contestEffectRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contestEffectRead.');
            }
            const localVarPath = `/api/v2/contest-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ContestEffectApiType = {
    contestEffectList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    contestEffectRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ContestEffectApi - factory function to inject configuration
 * @export
 */
export const ContestEffectApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ContestEffectApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        contestEffectList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ContestEffectApiFetchParamCreator(configuration).contestEffectList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        contestEffectRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ContestEffectApiFetchParamCreator(configuration).contestEffectRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ContestTypeApi - fetch parameter creator
 * @export
 */
export const ContestTypeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        contestTypeList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/contest-type/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        contestTypeRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contestTypeRead.');
            }
            const localVarPath = `/api/v2/contest-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ContestTypeApiType = {
    contestTypeList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    contestTypeRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ContestTypeApi - factory function to inject configuration
 * @export
 */
export const ContestTypeApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ContestTypeApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        contestTypeList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ContestTypeApiFetchParamCreator(configuration).contestTypeList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        contestTypeRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ContestTypeApiFetchParamCreator(configuration).contestTypeRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * EggGroupApi - fetch parameter creator
 * @export
 */
export const EggGroupApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        eggGroupList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/egg-group/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        eggGroupRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eggGroupRead.');
            }
            const localVarPath = `/api/v2/egg-group/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EggGroupApiType = {
    eggGroupList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    eggGroupRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * EggGroupApi - factory function to inject configuration
 * @export
 */
export const EggGroupApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EggGroupApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        eggGroupList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EggGroupApiFetchParamCreator(configuration).eggGroupList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        eggGroupRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EggGroupApiFetchParamCreator(configuration).eggGroupRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * EncounterConditionApi - fetch parameter creator
 * @export
 */
export const EncounterConditionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/encounter-condition/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling encounterConditionRead.');
            }
            const localVarPath = `/api/v2/encounter-condition/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EncounterConditionApiType = {
    encounterConditionList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    encounterConditionRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * EncounterConditionApi - factory function to inject configuration
 * @export
 */
export const EncounterConditionApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EncounterConditionApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EncounterConditionApiFetchParamCreator(configuration).encounterConditionList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EncounterConditionApiFetchParamCreator(configuration).encounterConditionRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * EncounterConditionValueApi - fetch parameter creator
 * @export
 */
export const EncounterConditionValueApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionValueList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/encounter-condition-value/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionValueRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling encounterConditionValueRead.');
            }
            const localVarPath = `/api/v2/encounter-condition-value/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EncounterConditionValueApiType = {
    encounterConditionValueList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    encounterConditionValueRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * EncounterConditionValueApi - factory function to inject configuration
 * @export
 */
export const EncounterConditionValueApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EncounterConditionValueApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionValueList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EncounterConditionValueApiFetchParamCreator(configuration).encounterConditionValueList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        encounterConditionValueRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EncounterConditionValueApiFetchParamCreator(configuration).encounterConditionValueRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * EncounterMethodApi - fetch parameter creator
 * @export
 */
export const EncounterMethodApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        encounterMethodList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/encounter-method/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        encounterMethodRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling encounterMethodRead.');
            }
            const localVarPath = `/api/v2/encounter-method/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EncounterMethodApiType = {
    encounterMethodList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    encounterMethodRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * EncounterMethodApi - factory function to inject configuration
 * @export
 */
export const EncounterMethodApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EncounterMethodApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        encounterMethodList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EncounterMethodApiFetchParamCreator(configuration).encounterMethodList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        encounterMethodRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EncounterMethodApiFetchParamCreator(configuration).encounterMethodRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * EvolutionChainApi - fetch parameter creator
 * @export
 */
export const EvolutionChainApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        evolutionChainList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/evolution-chain/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        evolutionChainRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling evolutionChainRead.');
            }
            const localVarPath = `/api/v2/evolution-chain/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EvolutionChainApiType = {
    evolutionChainList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    evolutionChainRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * EvolutionChainApi - factory function to inject configuration
 * @export
 */
export const EvolutionChainApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EvolutionChainApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        evolutionChainList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EvolutionChainApiFetchParamCreator(configuration).evolutionChainList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        evolutionChainRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EvolutionChainApiFetchParamCreator(configuration).evolutionChainRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * EvolutionTriggerApi - fetch parameter creator
 * @export
 */
export const EvolutionTriggerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        evolutionTriggerList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/evolution-trigger/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        evolutionTriggerRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling evolutionTriggerRead.');
            }
            const localVarPath = `/api/v2/evolution-trigger/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EvolutionTriggerApiType = {
    evolutionTriggerList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    evolutionTriggerRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * EvolutionTriggerApi - factory function to inject configuration
 * @export
 */
export const EvolutionTriggerApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EvolutionTriggerApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        evolutionTriggerList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EvolutionTriggerApiFetchParamCreator(configuration).evolutionTriggerList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        evolutionTriggerRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = EvolutionTriggerApiFetchParamCreator(configuration).evolutionTriggerRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * GenderApi - fetch parameter creator
 * @export
 */
export const GenderApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        genderList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/gender/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        genderRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling genderRead.');
            }
            const localVarPath = `/api/v2/gender/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type GenderApiType = {
    genderList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    genderRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * GenderApi - factory function to inject configuration
 * @export
 */
export const GenderApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): GenderApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        genderList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = GenderApiFetchParamCreator(configuration).genderList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        genderRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = GenderApiFetchParamCreator(configuration).genderRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * GenerationApi - fetch parameter creator
 * @export
 */
export const GenerationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        generationList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/generation/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        generationRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling generationRead.');
            }
            const localVarPath = `/api/v2/generation/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type GenerationApiType = {
    generationList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    generationRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * GenerationApi - factory function to inject configuration
 * @export
 */
export const GenerationApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): GenerationApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        generationList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = GenerationApiFetchParamCreator(configuration).generationList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        generationRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = GenerationApiFetchParamCreator(configuration).generationRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * GrowthRateApi - fetch parameter creator
 * @export
 */
export const GrowthRateApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        growthRateList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/growth-rate/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        growthRateRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling growthRateRead.');
            }
            const localVarPath = `/api/v2/growth-rate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type GrowthRateApiType = {
    growthRateList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    growthRateRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * GrowthRateApi - factory function to inject configuration
 * @export
 */
export const GrowthRateApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): GrowthRateApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        growthRateList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = GrowthRateApiFetchParamCreator(configuration).growthRateList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        growthRateRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = GrowthRateApiFetchParamCreator(configuration).growthRateRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ItemApi - fetch parameter creator
 * @export
 */
export const ItemApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/item/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling itemRead.');
            }
            const localVarPath = `/api/v2/item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ItemApiType = {
    itemList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    itemRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ItemApi - factory function to inject configuration
 * @export
 */
export const ItemApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ItemApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ItemAttributeApi - fetch parameter creator
 * @export
 */
export const ItemAttributeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemAttributeList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/item-attribute/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemAttributeRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling itemAttributeRead.');
            }
            const localVarPath = `/api/v2/item-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ItemAttributeApiType = {
    itemAttributeList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    itemAttributeRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ItemAttributeApi - factory function to inject configuration
 * @export
 */
export const ItemAttributeApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ItemAttributeApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemAttributeList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemAttributeApiFetchParamCreator(configuration).itemAttributeList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemAttributeRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemAttributeApiFetchParamCreator(configuration).itemAttributeRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ItemCategoryApi - fetch parameter creator
 * @export
 */
export const ItemCategoryApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemCategoryList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/item-category/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemCategoryRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling itemCategoryRead.');
            }
            const localVarPath = `/api/v2/item-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ItemCategoryApiType = {
    itemCategoryList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    itemCategoryRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ItemCategoryApi - factory function to inject configuration
 * @export
 */
export const ItemCategoryApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ItemCategoryApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemCategoryList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemCategoryApiFetchParamCreator(configuration).itemCategoryList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemCategoryRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemCategoryApiFetchParamCreator(configuration).itemCategoryRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ItemFlingEffectApi - fetch parameter creator
 * @export
 */
export const ItemFlingEffectApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemFlingEffectList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/item-fling-effect/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemFlingEffectRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling itemFlingEffectRead.');
            }
            const localVarPath = `/api/v2/item-fling-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ItemFlingEffectApiType = {
    itemFlingEffectList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    itemFlingEffectRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ItemFlingEffectApi - factory function to inject configuration
 * @export
 */
export const ItemFlingEffectApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ItemFlingEffectApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemFlingEffectList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemFlingEffectApiFetchParamCreator(configuration).itemFlingEffectList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemFlingEffectRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemFlingEffectApiFetchParamCreator(configuration).itemFlingEffectRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ItemPocketApi - fetch parameter creator
 * @export
 */
export const ItemPocketApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemPocketList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/item-pocket/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemPocketRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling itemPocketRead.');
            }
            const localVarPath = `/api/v2/item-pocket/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ItemPocketApiType = {
    itemPocketList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    itemPocketRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * ItemPocketApi - factory function to inject configuration
 * @export
 */
export const ItemPocketApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ItemPocketApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        itemPocketList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemPocketApiFetchParamCreator(configuration).itemPocketList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        itemPocketRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ItemPocketApiFetchParamCreator(configuration).itemPocketRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * LanguageApi - fetch parameter creator
 * @export
 */
export const LanguageApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        languageList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/language/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        languageRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling languageRead.');
            }
            const localVarPath = `/api/v2/language/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type LanguageApiType = {
    languageList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    languageRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * LanguageApi - factory function to inject configuration
 * @export
 */
export const LanguageApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): LanguageApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        languageList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = LanguageApiFetchParamCreator(configuration).languageList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        languageRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = LanguageApiFetchParamCreator(configuration).languageRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * LocationApi - fetch parameter creator
 * @export
 */
export const LocationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        locationList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/location/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        locationRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling locationRead.');
            }
            const localVarPath = `/api/v2/location/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type LocationApiType = {
    locationList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    locationRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * LocationApi - factory function to inject configuration
 * @export
 */
export const LocationApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): LocationApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        locationList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = LocationApiFetchParamCreator(configuration).locationList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        locationRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = LocationApiFetchParamCreator(configuration).locationRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * LocationAreaApi - fetch parameter creator
 * @export
 */
export const LocationAreaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        locationAreaList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/location-area/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        locationAreaRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling locationAreaRead.');
            }
            const localVarPath = `/api/v2/location-area/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type LocationAreaApiType = {
    locationAreaList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    locationAreaRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * LocationAreaApi - factory function to inject configuration
 * @export
 */
export const LocationAreaApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): LocationAreaApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        locationAreaList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = LocationAreaApiFetchParamCreator(configuration).locationAreaList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        locationAreaRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = LocationAreaApiFetchParamCreator(configuration).locationAreaRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MachineApi - fetch parameter creator
 * @export
 */
export const MachineApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        machineList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/machine/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        machineRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling machineRead.');
            }
            const localVarPath = `/api/v2/machine/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MachineApiType = {
    machineList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    machineRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MachineApi - factory function to inject configuration
 * @export
 */
export const MachineApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MachineApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        machineList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MachineApiFetchParamCreator(configuration).machineList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        machineRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MachineApiFetchParamCreator(configuration).machineRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveApi - fetch parameter creator
 * @export
 */
export const MoveApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveRead.');
            }
            const localVarPath = `/api/v2/move/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveApiType = {
    moveList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveApi - factory function to inject configuration
 * @export
 */
export const MoveApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveApiFetchParamCreator(configuration).moveList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveApiFetchParamCreator(configuration).moveRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveAilmentApi - fetch parameter creator
 * @export
 */
export const MoveAilmentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveAilmentList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move-ailment/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveAilmentRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveAilmentRead.');
            }
            const localVarPath = `/api/v2/move-ailment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveAilmentApiType = {
    moveAilmentList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveAilmentRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveAilmentApi - factory function to inject configuration
 * @export
 */
export const MoveAilmentApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveAilmentApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveAilmentList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveAilmentApiFetchParamCreator(configuration).moveAilmentList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveAilmentRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveAilmentApiFetchParamCreator(configuration).moveAilmentRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveBattleStyleApi - fetch parameter creator
 * @export
 */
export const MoveBattleStyleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveBattleStyleList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move-battle-style/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveBattleStyleRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveBattleStyleRead.');
            }
            const localVarPath = `/api/v2/move-battle-style/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveBattleStyleApiType = {
    moveBattleStyleList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveBattleStyleRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveBattleStyleApi - factory function to inject configuration
 * @export
 */
export const MoveBattleStyleApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveBattleStyleApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveBattleStyleList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveBattleStyleApiFetchParamCreator(configuration).moveBattleStyleList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveBattleStyleRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveBattleStyleApiFetchParamCreator(configuration).moveBattleStyleRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveCategoryApi - fetch parameter creator
 * @export
 */
export const MoveCategoryApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveCategoryList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move-category/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveCategoryRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveCategoryRead.');
            }
            const localVarPath = `/api/v2/move-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveCategoryApiType = {
    moveCategoryList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveCategoryRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveCategoryApi - factory function to inject configuration
 * @export
 */
export const MoveCategoryApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveCategoryApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveCategoryList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveCategoryApiFetchParamCreator(configuration).moveCategoryList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveCategoryRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveCategoryApiFetchParamCreator(configuration).moveCategoryRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveDamageClassApi - fetch parameter creator
 * @export
 */
export const MoveDamageClassApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveDamageClassList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move-damage-class/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveDamageClassRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveDamageClassRead.');
            }
            const localVarPath = `/api/v2/move-damage-class/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveDamageClassApiType = {
    moveDamageClassList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveDamageClassRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveDamageClassApi - factory function to inject configuration
 * @export
 */
export const MoveDamageClassApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveDamageClassApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveDamageClassList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveDamageClassApiFetchParamCreator(configuration).moveDamageClassList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveDamageClassRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveDamageClassApiFetchParamCreator(configuration).moveDamageClassRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveLearnMethodApi - fetch parameter creator
 * @export
 */
export const MoveLearnMethodApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveLearnMethodList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move-learn-method/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveLearnMethodRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveLearnMethodRead.');
            }
            const localVarPath = `/api/v2/move-learn-method/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveLearnMethodApiType = {
    moveLearnMethodList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveLearnMethodRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveLearnMethodApi - factory function to inject configuration
 * @export
 */
export const MoveLearnMethodApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveLearnMethodApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveLearnMethodList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveLearnMethodApiFetchParamCreator(configuration).moveLearnMethodList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveLearnMethodRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveLearnMethodApiFetchParamCreator(configuration).moveLearnMethodRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MoveTargetApi - fetch parameter creator
 * @export
 */
export const MoveTargetApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveTargetList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/move-target/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveTargetRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling moveTargetRead.');
            }
            const localVarPath = `/api/v2/move-target/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MoveTargetApiType = {
    moveTargetList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    moveTargetRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * MoveTargetApi - factory function to inject configuration
 * @export
 */
export const MoveTargetApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MoveTargetApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        moveTargetList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveTargetApiFetchParamCreator(configuration).moveTargetList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        moveTargetRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = MoveTargetApiFetchParamCreator(configuration).moveTargetRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * NatureApi - fetch parameter creator
 * @export
 */
export const NatureApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        natureList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/nature/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        natureRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling natureRead.');
            }
            const localVarPath = `/api/v2/nature/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type NatureApiType = {
    natureList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    natureRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * NatureApi - factory function to inject configuration
 * @export
 */
export const NatureApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): NatureApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        natureList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = NatureApiFetchParamCreator(configuration).natureList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        natureRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = NatureApiFetchParamCreator(configuration).natureRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PalParkAreaApi - fetch parameter creator
 * @export
 */
export const PalParkAreaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        palParkAreaList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pal-park-area/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        palParkAreaRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling palParkAreaRead.');
            }
            const localVarPath = `/api/v2/pal-park-area/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PalParkAreaApiType = {
    palParkAreaList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    palParkAreaRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PalParkAreaApi - factory function to inject configuration
 * @export
 */
export const PalParkAreaApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PalParkAreaApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        palParkAreaList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PalParkAreaApiFetchParamCreator(configuration).palParkAreaList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        palParkAreaRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PalParkAreaApiFetchParamCreator(configuration).palParkAreaRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokeathlonStatApi - fetch parameter creator
 * @export
 */
export const PokeathlonStatApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokeathlonStatList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokeathlon-stat/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokeathlonStatRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokeathlonStatRead.');
            }
            const localVarPath = `/api/v2/pokeathlon-stat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokeathlonStatApiType = {
    pokeathlonStatList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokeathlonStatRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokeathlonStatApi - factory function to inject configuration
 * @export
 */
export const PokeathlonStatApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokeathlonStatApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokeathlonStatList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokeathlonStatApiFetchParamCreator(configuration).pokeathlonStatList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokeathlonStatRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokeathlonStatApiFetchParamCreator(configuration).pokeathlonStatRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokedexApi - fetch parameter creator
 * @export
 */
export const PokedexApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokedexList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokedex/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokedexRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokedexRead.');
            }
            const localVarPath = `/api/v2/pokedex/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokedexApiType = {
    pokedexList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokedexRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokedexApi - factory function to inject configuration
 * @export
 */
export const PokedexApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokedexApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokedexList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokedexApiFetchParamCreator(configuration).pokedexList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokedexRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokedexApiFetchParamCreator(configuration).pokedexRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokemonApi - fetch parameter creator
 * @export
 */
export const PokemonApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokemon/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokemonRead.');
            }
            const localVarPath = `/api/v2/pokemon/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokemonApiType = {
    pokemonList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokemonRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokemonApi - factory function to inject configuration
 * @export
 */
export const PokemonApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokemonApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonApiFetchParamCreator(configuration).pokemonList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonApiFetchParamCreator(configuration).pokemonRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokemonColorApi - fetch parameter creator
 * @export
 */
export const PokemonColorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonColorList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokemon-color/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonColorRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokemonColorRead.');
            }
            const localVarPath = `/api/v2/pokemon-color/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokemonColorApiType = {
    pokemonColorList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokemonColorRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokemonColorApi - factory function to inject configuration
 * @export
 */
export const PokemonColorApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokemonColorApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonColorList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonColorApiFetchParamCreator(configuration).pokemonColorList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonColorRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonColorApiFetchParamCreator(configuration).pokemonColorRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokemonFormApi - fetch parameter creator
 * @export
 */
export const PokemonFormApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonFormList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokemon-form/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonFormRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokemonFormRead.');
            }
            const localVarPath = `/api/v2/pokemon-form/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokemonFormApiType = {
    pokemonFormList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokemonFormRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokemonFormApi - factory function to inject configuration
 * @export
 */
export const PokemonFormApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokemonFormApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonFormList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonFormApiFetchParamCreator(configuration).pokemonFormList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonFormRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonFormApiFetchParamCreator(configuration).pokemonFormRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokemonHabitatApi - fetch parameter creator
 * @export
 */
export const PokemonHabitatApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonHabitatList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokemon-habitat/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonHabitatRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokemonHabitatRead.');
            }
            const localVarPath = `/api/v2/pokemon-habitat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokemonHabitatApiType = {
    pokemonHabitatList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokemonHabitatRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokemonHabitatApi - factory function to inject configuration
 * @export
 */
export const PokemonHabitatApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokemonHabitatApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonHabitatList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonHabitatApiFetchParamCreator(configuration).pokemonHabitatList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonHabitatRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonHabitatApiFetchParamCreator(configuration).pokemonHabitatRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokemonShapeApi - fetch parameter creator
 * @export
 */
export const PokemonShapeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonShapeList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokemon-shape/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonShapeRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokemonShapeRead.');
            }
            const localVarPath = `/api/v2/pokemon-shape/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokemonShapeApiType = {
    pokemonShapeList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokemonShapeRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokemonShapeApi - factory function to inject configuration
 * @export
 */
export const PokemonShapeApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokemonShapeApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonShapeList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonShapeApiFetchParamCreator(configuration).pokemonShapeList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonShapeRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonShapeApiFetchParamCreator(configuration).pokemonShapeRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PokemonSpeciesApi - fetch parameter creator
 * @export
 */
export const PokemonSpeciesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonSpeciesList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/pokemon-species/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonSpeciesRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pokemonSpeciesRead.');
            }
            const localVarPath = `/api/v2/pokemon-species/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PokemonSpeciesApiType = {
    pokemonSpeciesList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    pokemonSpeciesRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * PokemonSpeciesApi - factory function to inject configuration
 * @export
 */
export const PokemonSpeciesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PokemonSpeciesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        pokemonSpeciesList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonSpeciesApiFetchParamCreator(configuration).pokemonSpeciesList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        pokemonSpeciesRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = PokemonSpeciesApiFetchParamCreator(configuration).pokemonSpeciesRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * RegionApi - fetch parameter creator
 * @export
 */
export const RegionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        regionList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/region/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        regionRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling regionRead.');
            }
            const localVarPath = `/api/v2/region/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type RegionApiType = {
    regionList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    regionRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * RegionApi - factory function to inject configuration
 * @export
 */
export const RegionApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): RegionApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        regionList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = RegionApiFetchParamCreator(configuration).regionList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        regionRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = RegionApiFetchParamCreator(configuration).regionRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * StatApi - fetch parameter creator
 * @export
 */
export const StatApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        statList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/stat/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        statRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling statRead.');
            }
            const localVarPath = `/api/v2/stat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type StatApiType = {
    statList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    statRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * StatApi - factory function to inject configuration
 * @export
 */
export const StatApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): StatApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        statList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = StatApiFetchParamCreator(configuration).statList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        statRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = StatApiFetchParamCreator(configuration).statRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SuperContestEffectApi - fetch parameter creator
 * @export
 */
export const SuperContestEffectApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        superContestEffectList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/super-contest-effect/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        superContestEffectRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling superContestEffectRead.');
            }
            const localVarPath = `/api/v2/super-contest-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SuperContestEffectApiType = {
    superContestEffectList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    superContestEffectRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * SuperContestEffectApi - factory function to inject configuration
 * @export
 */
export const SuperContestEffectApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SuperContestEffectApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        superContestEffectList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = SuperContestEffectApiFetchParamCreator(configuration).superContestEffectList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        superContestEffectRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = SuperContestEffectApiFetchParamCreator(configuration).superContestEffectRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TypeApi - fetch parameter creator
 * @export
 */
export const TypeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        typeList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/type/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        typeRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling typeRead.');
            }
            const localVarPath = `/api/v2/type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TypeApiType = {
    typeList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    typeRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * TypeApi - factory function to inject configuration
 * @export
 */
export const TypeApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TypeApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        typeList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = TypeApiFetchParamCreator(configuration).typeList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        typeRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = TypeApiFetchParamCreator(configuration).typeRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * VersionApi - fetch parameter creator
 * @export
 */
export const VersionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        versionList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/version/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        versionRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling versionRead.');
            }
            const localVarPath = `/api/v2/version/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type VersionApiType = {
    versionList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    versionRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * VersionApi - factory function to inject configuration
 * @export
 */
export const VersionApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): VersionApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        versionList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).versionList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        versionRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).versionRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * VersionGroupApi - fetch parameter creator
 * @export
 */
export const VersionGroupApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @throws {RequiredError}
         */
        versionGroupList(limit?: number, offset?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/api/v2/version-group/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = ((offset:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @throws {RequiredError}
         */
        versionGroupRead(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling versionGroupRead.');
            }
            const localVarPath = `/api/v2/version-group/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type VersionGroupApiType = {
    versionGroupList(limit?: number, offset?: number, options?: RequestOptions): Promise<string>,

    versionGroupRead(id: number, options?: RequestOptions): Promise<string>,
}

/**
 * VersionGroupApi - factory function to inject configuration
 * @export
 */
export const VersionGroupApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): VersionGroupApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @throws {RequiredError}
         */
        versionGroupList(limit?: number, offset?: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = VersionGroupApiFetchParamCreator(configuration).versionGroupList(limit, offset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @throws {RequiredError}
         */
        versionGroupRead(id: number, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = VersionGroupApiFetchParamCreator(configuration).versionGroupRead(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = {
    AbilityApi: AbilityApiType,

    BerryApi: BerryApiType,

    BerryFirmnessApi: BerryFirmnessApiType,

    BerryFlavorApi: BerryFlavorApiType,

    CharacteristicApi: CharacteristicApiType,

    ContestEffectApi: ContestEffectApiType,

    ContestTypeApi: ContestTypeApiType,

    EggGroupApi: EggGroupApiType,

    EncounterConditionApi: EncounterConditionApiType,

    EncounterConditionValueApi: EncounterConditionValueApiType,

    EncounterMethodApi: EncounterMethodApiType,

    EvolutionChainApi: EvolutionChainApiType,

    EvolutionTriggerApi: EvolutionTriggerApiType,

    GenderApi: GenderApiType,

    GenerationApi: GenerationApiType,

    GrowthRateApi: GrowthRateApiType,

    ItemApi: ItemApiType,

    ItemAttributeApi: ItemAttributeApiType,

    ItemCategoryApi: ItemCategoryApiType,

    ItemFlingEffectApi: ItemFlingEffectApiType,

    ItemPocketApi: ItemPocketApiType,

    LanguageApi: LanguageApiType,

    LocationApi: LocationApiType,

    LocationAreaApi: LocationAreaApiType,

    MachineApi: MachineApiType,

    MoveApi: MoveApiType,

    MoveAilmentApi: MoveAilmentApiType,

    MoveBattleStyleApi: MoveBattleStyleApiType,

    MoveCategoryApi: MoveCategoryApiType,

    MoveDamageClassApi: MoveDamageClassApiType,

    MoveLearnMethodApi: MoveLearnMethodApiType,

    MoveTargetApi: MoveTargetApiType,

    NatureApi: NatureApiType,

    PalParkAreaApi: PalParkAreaApiType,

    PokeathlonStatApi: PokeathlonStatApiType,

    PokedexApi: PokedexApiType,

    PokemonApi: PokemonApiType,

    PokemonColorApi: PokemonColorApiType,

    PokemonFormApi: PokemonFormApiType,

    PokemonHabitatApi: PokemonHabitatApiType,

    PokemonShapeApi: PokemonShapeApiType,

    PokemonSpeciesApi: PokemonSpeciesApiType,

    RegionApi: RegionApiType,

    StatApi: StatApiType,

    SuperContestEffectApi: SuperContestEffectApiType,

    TypeApi: TypeApiType,

    VersionApi: VersionApiType,

    VersionGroupApi: VersionGroupApiType,
 }
