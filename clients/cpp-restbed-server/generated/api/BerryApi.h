/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BerryApi.h
 *
 * 
 */

#ifndef BerryApi_H_
#define BerryApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BerryApiException: public std::exception
{
public:
    BerryApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BerryApiResources {
/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ApiV2BerryResource: public restbed::Resource
{
public:
    ApiV2BerryResource(const std::string& context = "");
    virtual ~ApiV2BerryResource() = default;

    ApiV2BerryResource(
        const ApiV2BerryResource& other) = default; // copy constructor
    ApiV2BerryResource(ApiV2BerryResource&& other) noexcept = default; // move constructor

    ApiV2BerryResource& operator=(const ApiV2BerryResource& other) = default; // copy assignment
    ApiV2BerryResource& operator=(ApiV2BerryResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int32_t & limit, int32_t & offset)> handler_GET_func =
            [](int32_t &, int32_t &) -> std::pair<int, std::string>
                { throw BerryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int32_t & limit, int32_t & offset);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBerryApiException(const BerryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ApiV2BerryIdResource: public restbed::Resource
{
public:
    ApiV2BerryIdResource(const std::string& context = "");
    virtual ~ApiV2BerryIdResource() = default;

    ApiV2BerryIdResource(
        const ApiV2BerryIdResource& other) = default; // copy constructor
    ApiV2BerryIdResource(ApiV2BerryIdResource&& other) noexcept = default; // move constructor

    ApiV2BerryIdResource& operator=(const ApiV2BerryIdResource& other) = default; // copy assignment
    ApiV2BerryIdResource& operator=(ApiV2BerryIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int32_t & id)> handler_GET_func =
            [](int32_t &) -> std::pair<int, std::string>
                { throw BerryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int32_t & id);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBerryApiException(const BerryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BerryApiResources */

using BerryApiApiV2BerryResource [[deprecated]] = BerryApiResources::ApiV2BerryResource;
using BerryApiApiV2BerryIdResource [[deprecated]] = BerryApiResources::ApiV2BerryIdResource;

//
// The restbed service to actually implement the REST server
//
class  BerryApi
{
public:
    explicit BerryApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BerryApi();

    std::shared_ptr<BerryApiResources::ApiV2BerryResource> getApiV2BerryResource();
    std::shared_ptr<BerryApiResources::ApiV2BerryIdResource> getApiV2BerryIdResource();

    void setResource(std::shared_ptr<BerryApiResources::ApiV2BerryResource> resource);
    void setResource(std::shared_ptr<BerryApiResources::ApiV2BerryIdResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBerryApiApiV2BerryResource(std::shared_ptr<BerryApiResources::ApiV2BerryResource> spBerryApiApiV2BerryResource);
    [[deprecated("use setResource()")]]
    virtual void setBerryApiApiV2BerryIdResource(std::shared_ptr<BerryApiResources::ApiV2BerryIdResource> spBerryApiApiV2BerryIdResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BerryApiResources::ApiV2BerryResource> m_spApiV2BerryResource;
    std::shared_ptr<BerryApiResources::ApiV2BerryIdResource> m_spApiV2BerryIdResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BerryApi_H_ */

