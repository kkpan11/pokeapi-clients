/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Provides hosting configuration for Org.OpenAPITools
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AbilityApiEvents>();
            _services.AddTransient<IAbilityApi, AbilityApi>();
            _services.AddSingleton<BerryApiEvents>();
            _services.AddTransient<IBerryApi, BerryApi>();
            _services.AddSingleton<BerryFirmnessApiEvents>();
            _services.AddTransient<IBerryFirmnessApi, BerryFirmnessApi>();
            _services.AddSingleton<BerryFlavorApiEvents>();
            _services.AddTransient<IBerryFlavorApi, BerryFlavorApi>();
            _services.AddSingleton<CharacteristicApiEvents>();
            _services.AddTransient<ICharacteristicApi, CharacteristicApi>();
            _services.AddSingleton<ContestEffectApiEvents>();
            _services.AddTransient<IContestEffectApi, ContestEffectApi>();
            _services.AddSingleton<ContestTypeApiEvents>();
            _services.AddTransient<IContestTypeApi, ContestTypeApi>();
            _services.AddSingleton<EggGroupApiEvents>();
            _services.AddTransient<IEggGroupApi, EggGroupApi>();
            _services.AddSingleton<EncounterConditionApiEvents>();
            _services.AddTransient<IEncounterConditionApi, EncounterConditionApi>();
            _services.AddSingleton<EncounterConditionValueApiEvents>();
            _services.AddTransient<IEncounterConditionValueApi, EncounterConditionValueApi>();
            _services.AddSingleton<EncounterMethodApiEvents>();
            _services.AddTransient<IEncounterMethodApi, EncounterMethodApi>();
            _services.AddSingleton<EvolutionChainApiEvents>();
            _services.AddTransient<IEvolutionChainApi, EvolutionChainApi>();
            _services.AddSingleton<EvolutionTriggerApiEvents>();
            _services.AddTransient<IEvolutionTriggerApi, EvolutionTriggerApi>();
            _services.AddSingleton<GenderApiEvents>();
            _services.AddTransient<IGenderApi, GenderApi>();
            _services.AddSingleton<GenerationApiEvents>();
            _services.AddTransient<IGenerationApi, GenerationApi>();
            _services.AddSingleton<GrowthRateApiEvents>();
            _services.AddTransient<IGrowthRateApi, GrowthRateApi>();
            _services.AddSingleton<ItemApiEvents>();
            _services.AddTransient<IItemApi, ItemApi>();
            _services.AddSingleton<ItemAttributeApiEvents>();
            _services.AddTransient<IItemAttributeApi, ItemAttributeApi>();
            _services.AddSingleton<ItemCategoryApiEvents>();
            _services.AddTransient<IItemCategoryApi, ItemCategoryApi>();
            _services.AddSingleton<ItemFlingEffectApiEvents>();
            _services.AddTransient<IItemFlingEffectApi, ItemFlingEffectApi>();
            _services.AddSingleton<ItemPocketApiEvents>();
            _services.AddTransient<IItemPocketApi, ItemPocketApi>();
            _services.AddSingleton<LanguageApiEvents>();
            _services.AddTransient<ILanguageApi, LanguageApi>();
            _services.AddSingleton<LocationApiEvents>();
            _services.AddTransient<ILocationApi, LocationApi>();
            _services.AddSingleton<LocationAreaApiEvents>();
            _services.AddTransient<ILocationAreaApi, LocationAreaApi>();
            _services.AddSingleton<MachineApiEvents>();
            _services.AddTransient<IMachineApi, MachineApi>();
            _services.AddSingleton<MoveApiEvents>();
            _services.AddTransient<IMoveApi, MoveApi>();
            _services.AddSingleton<MoveAilmentApiEvents>();
            _services.AddTransient<IMoveAilmentApi, MoveAilmentApi>();
            _services.AddSingleton<MoveBattleStyleApiEvents>();
            _services.AddTransient<IMoveBattleStyleApi, MoveBattleStyleApi>();
            _services.AddSingleton<MoveCategoryApiEvents>();
            _services.AddTransient<IMoveCategoryApi, MoveCategoryApi>();
            _services.AddSingleton<MoveDamageClassApiEvents>();
            _services.AddTransient<IMoveDamageClassApi, MoveDamageClassApi>();
            _services.AddSingleton<MoveLearnMethodApiEvents>();
            _services.AddTransient<IMoveLearnMethodApi, MoveLearnMethodApi>();
            _services.AddSingleton<MoveTargetApiEvents>();
            _services.AddTransient<IMoveTargetApi, MoveTargetApi>();
            _services.AddSingleton<NatureApiEvents>();
            _services.AddTransient<INatureApi, NatureApi>();
            _services.AddSingleton<PalParkAreaApiEvents>();
            _services.AddTransient<IPalParkAreaApi, PalParkAreaApi>();
            _services.AddSingleton<PokeathlonStatApiEvents>();
            _services.AddTransient<IPokeathlonStatApi, PokeathlonStatApi>();
            _services.AddSingleton<PokedexApiEvents>();
            _services.AddTransient<IPokedexApi, PokedexApi>();
            _services.AddSingleton<PokemonApiEvents>();
            _services.AddTransient<IPokemonApi, PokemonApi>();
            _services.AddSingleton<PokemonColorApiEvents>();
            _services.AddTransient<IPokemonColorApi, PokemonColorApi>();
            _services.AddSingleton<PokemonFormApiEvents>();
            _services.AddTransient<IPokemonFormApi, PokemonFormApi>();
            _services.AddSingleton<PokemonHabitatApiEvents>();
            _services.AddTransient<IPokemonHabitatApi, PokemonHabitatApi>();
            _services.AddSingleton<PokemonShapeApiEvents>();
            _services.AddTransient<IPokemonShapeApi, PokemonShapeApi>();
            _services.AddSingleton<PokemonSpeciesApiEvents>();
            _services.AddTransient<IPokemonSpeciesApi, PokemonSpeciesApi>();
            _services.AddSingleton<RegionApiEvents>();
            _services.AddTransient<IRegionApi, RegionApi>();
            _services.AddSingleton<StatApiEvents>();
            _services.AddTransient<IStatApi, StatApi>();
            _services.AddSingleton<SuperContestEffectApiEvents>();
            _services.AddTransient<ISuperContestEffectApi, SuperContestEffectApi>();
            _services.AddSingleton<TypeApiEvents>();
            _services.AddTransient<ITypeApi, TypeApi>();
            _services.AddSingleton<VersionApiEvents>();
            _services.AddTransient<IVersionApi, VersionApi>();
            _services.AddSingleton<VersionGroupApiEvents>();
            _services.AddTransient<IVersionGroupApi, VersionGroupApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAbilityApi, AbilityApi>(client));
            builders.Add(_services.AddHttpClient<IBerryApi, BerryApi>(client));
            builders.Add(_services.AddHttpClient<IBerryFirmnessApi, BerryFirmnessApi>(client));
            builders.Add(_services.AddHttpClient<IBerryFlavorApi, BerryFlavorApi>(client));
            builders.Add(_services.AddHttpClient<ICharacteristicApi, CharacteristicApi>(client));
            builders.Add(_services.AddHttpClient<IContestEffectApi, ContestEffectApi>(client));
            builders.Add(_services.AddHttpClient<IContestTypeApi, ContestTypeApi>(client));
            builders.Add(_services.AddHttpClient<IEggGroupApi, EggGroupApi>(client));
            builders.Add(_services.AddHttpClient<IEncounterConditionApi, EncounterConditionApi>(client));
            builders.Add(_services.AddHttpClient<IEncounterConditionValueApi, EncounterConditionValueApi>(client));
            builders.Add(_services.AddHttpClient<IEncounterMethodApi, EncounterMethodApi>(client));
            builders.Add(_services.AddHttpClient<IEvolutionChainApi, EvolutionChainApi>(client));
            builders.Add(_services.AddHttpClient<IEvolutionTriggerApi, EvolutionTriggerApi>(client));
            builders.Add(_services.AddHttpClient<IGenderApi, GenderApi>(client));
            builders.Add(_services.AddHttpClient<IGenerationApi, GenerationApi>(client));
            builders.Add(_services.AddHttpClient<IGrowthRateApi, GrowthRateApi>(client));
            builders.Add(_services.AddHttpClient<IItemApi, ItemApi>(client));
            builders.Add(_services.AddHttpClient<IItemAttributeApi, ItemAttributeApi>(client));
            builders.Add(_services.AddHttpClient<IItemCategoryApi, ItemCategoryApi>(client));
            builders.Add(_services.AddHttpClient<IItemFlingEffectApi, ItemFlingEffectApi>(client));
            builders.Add(_services.AddHttpClient<IItemPocketApi, ItemPocketApi>(client));
            builders.Add(_services.AddHttpClient<ILanguageApi, LanguageApi>(client));
            builders.Add(_services.AddHttpClient<ILocationApi, LocationApi>(client));
            builders.Add(_services.AddHttpClient<ILocationAreaApi, LocationAreaApi>(client));
            builders.Add(_services.AddHttpClient<IMachineApi, MachineApi>(client));
            builders.Add(_services.AddHttpClient<IMoveApi, MoveApi>(client));
            builders.Add(_services.AddHttpClient<IMoveAilmentApi, MoveAilmentApi>(client));
            builders.Add(_services.AddHttpClient<IMoveBattleStyleApi, MoveBattleStyleApi>(client));
            builders.Add(_services.AddHttpClient<IMoveCategoryApi, MoveCategoryApi>(client));
            builders.Add(_services.AddHttpClient<IMoveDamageClassApi, MoveDamageClassApi>(client));
            builders.Add(_services.AddHttpClient<IMoveLearnMethodApi, MoveLearnMethodApi>(client));
            builders.Add(_services.AddHttpClient<IMoveTargetApi, MoveTargetApi>(client));
            builders.Add(_services.AddHttpClient<INatureApi, NatureApi>(client));
            builders.Add(_services.AddHttpClient<IPalParkAreaApi, PalParkAreaApi>(client));
            builders.Add(_services.AddHttpClient<IPokeathlonStatApi, PokeathlonStatApi>(client));
            builders.Add(_services.AddHttpClient<IPokedexApi, PokedexApi>(client));
            builders.Add(_services.AddHttpClient<IPokemonApi, PokemonApi>(client));
            builders.Add(_services.AddHttpClient<IPokemonColorApi, PokemonColorApi>(client));
            builders.Add(_services.AddHttpClient<IPokemonFormApi, PokemonFormApi>(client));
            builders.Add(_services.AddHttpClient<IPokemonHabitatApi, PokemonHabitatApi>(client));
            builders.Add(_services.AddHttpClient<IPokemonShapeApi, PokemonShapeApi>(client));
            builders.Add(_services.AddHttpClient<IPokemonSpeciesApi, PokemonSpeciesApi>(client));
            builders.Add(_services.AddHttpClient<IRegionApi, RegionApi>(client));
            builders.Add(_services.AddHttpClient<IStatApi, StatApi>(client));
            builders.Add(_services.AddHttpClient<ISuperContestEffectApi, SuperContestEffectApi>(client));
            builders.Add(_services.AddHttpClient<ITypeApi, TypeApi>(client));
            builders.Add(_services.AddHttpClient<IVersionApi, VersionApi>(client));
            builders.Add(_services.AddHttpClient<IVersionGroupApi, VersionGroupApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
