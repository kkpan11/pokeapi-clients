/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Extensions;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var abilityApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAbilityApi>();
            Assert.True(abilityApi.HttpClient.BaseAddress != null);

            var berryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBerryApi>();
            Assert.True(berryApi.HttpClient.BaseAddress != null);

            var berryFirmnessApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBerryFirmnessApi>();
            Assert.True(berryFirmnessApi.HttpClient.BaseAddress != null);

            var berryFlavorApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBerryFlavorApi>();
            Assert.True(berryFlavorApi.HttpClient.BaseAddress != null);

            var characteristicApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICharacteristicApi>();
            Assert.True(characteristicApi.HttpClient.BaseAddress != null);

            var contestEffectApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContestEffectApi>();
            Assert.True(contestEffectApi.HttpClient.BaseAddress != null);

            var contestTypeApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContestTypeApi>();
            Assert.True(contestTypeApi.HttpClient.BaseAddress != null);

            var eggGroupApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEggGroupApi>();
            Assert.True(eggGroupApi.HttpClient.BaseAddress != null);

            var encounterConditionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEncounterConditionApi>();
            Assert.True(encounterConditionApi.HttpClient.BaseAddress != null);

            var encounterConditionValueApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEncounterConditionValueApi>();
            Assert.True(encounterConditionValueApi.HttpClient.BaseAddress != null);

            var encounterMethodApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEncounterMethodApi>();
            Assert.True(encounterMethodApi.HttpClient.BaseAddress != null);

            var evolutionChainApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEvolutionChainApi>();
            Assert.True(evolutionChainApi.HttpClient.BaseAddress != null);

            var evolutionTriggerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEvolutionTriggerApi>();
            Assert.True(evolutionTriggerApi.HttpClient.BaseAddress != null);

            var genderApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGenderApi>();
            Assert.True(genderApi.HttpClient.BaseAddress != null);

            var generationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGenerationApi>();
            Assert.True(generationApi.HttpClient.BaseAddress != null);

            var growthRateApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGrowthRateApi>();
            Assert.True(growthRateApi.HttpClient.BaseAddress != null);

            var itemApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IItemApi>();
            Assert.True(itemApi.HttpClient.BaseAddress != null);

            var itemAttributeApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IItemAttributeApi>();
            Assert.True(itemAttributeApi.HttpClient.BaseAddress != null);

            var itemCategoryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IItemCategoryApi>();
            Assert.True(itemCategoryApi.HttpClient.BaseAddress != null);

            var itemFlingEffectApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IItemFlingEffectApi>();
            Assert.True(itemFlingEffectApi.HttpClient.BaseAddress != null);

            var itemPocketApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IItemPocketApi>();
            Assert.True(itemPocketApi.HttpClient.BaseAddress != null);

            var languageApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);

            var locationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILocationApi>();
            Assert.True(locationApi.HttpClient.BaseAddress != null);

            var locationAreaApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILocationAreaApi>();
            Assert.True(locationAreaApi.HttpClient.BaseAddress != null);

            var machineApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMachineApi>();
            Assert.True(machineApi.HttpClient.BaseAddress != null);

            var moveApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveApi>();
            Assert.True(moveApi.HttpClient.BaseAddress != null);

            var moveAilmentApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveAilmentApi>();
            Assert.True(moveAilmentApi.HttpClient.BaseAddress != null);

            var moveBattleStyleApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveBattleStyleApi>();
            Assert.True(moveBattleStyleApi.HttpClient.BaseAddress != null);

            var moveCategoryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveCategoryApi>();
            Assert.True(moveCategoryApi.HttpClient.BaseAddress != null);

            var moveDamageClassApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveDamageClassApi>();
            Assert.True(moveDamageClassApi.HttpClient.BaseAddress != null);

            var moveLearnMethodApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveLearnMethodApi>();
            Assert.True(moveLearnMethodApi.HttpClient.BaseAddress != null);

            var moveTargetApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMoveTargetApi>();
            Assert.True(moveTargetApi.HttpClient.BaseAddress != null);

            var natureApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<INatureApi>();
            Assert.True(natureApi.HttpClient.BaseAddress != null);

            var palParkAreaApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPalParkAreaApi>();
            Assert.True(palParkAreaApi.HttpClient.BaseAddress != null);

            var pokeathlonStatApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokeathlonStatApi>();
            Assert.True(pokeathlonStatApi.HttpClient.BaseAddress != null);

            var pokedexApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokedexApi>();
            Assert.True(pokedexApi.HttpClient.BaseAddress != null);

            var pokemonApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokemonApi>();
            Assert.True(pokemonApi.HttpClient.BaseAddress != null);

            var pokemonColorApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokemonColorApi>();
            Assert.True(pokemonColorApi.HttpClient.BaseAddress != null);

            var pokemonFormApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokemonFormApi>();
            Assert.True(pokemonFormApi.HttpClient.BaseAddress != null);

            var pokemonHabitatApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokemonHabitatApi>();
            Assert.True(pokemonHabitatApi.HttpClient.BaseAddress != null);

            var pokemonShapeApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokemonShapeApi>();
            Assert.True(pokemonShapeApi.HttpClient.BaseAddress != null);

            var pokemonSpeciesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPokemonSpeciesApi>();
            Assert.True(pokemonSpeciesApi.HttpClient.BaseAddress != null);

            var regionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRegionApi>();
            Assert.True(regionApi.HttpClient.BaseAddress != null);

            var statApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStatApi>();
            Assert.True(statApi.HttpClient.BaseAddress != null);

            var superContestEffectApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISuperContestEffectApi>();
            Assert.True(superContestEffectApi.HttpClient.BaseAddress != null);

            var typeApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITypeApi>();
            Assert.True(typeApi.HttpClient.BaseAddress != null);

            var versionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVersionApi>();
            Assert.True(versionApi.HttpClient.BaseAddress != null);

            var versionGroupApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVersionGroupApi>();
            Assert.True(versionGroupApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var abilityApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAbilityApi>();
            Assert.True(abilityApi.HttpClient.BaseAddress != null);

            var berryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBerryApi>();
            Assert.True(berryApi.HttpClient.BaseAddress != null);

            var berryFirmnessApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBerryFirmnessApi>();
            Assert.True(berryFirmnessApi.HttpClient.BaseAddress != null);

            var berryFlavorApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBerryFlavorApi>();
            Assert.True(berryFlavorApi.HttpClient.BaseAddress != null);

            var characteristicApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICharacteristicApi>();
            Assert.True(characteristicApi.HttpClient.BaseAddress != null);

            var contestEffectApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContestEffectApi>();
            Assert.True(contestEffectApi.HttpClient.BaseAddress != null);

            var contestTypeApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContestTypeApi>();
            Assert.True(contestTypeApi.HttpClient.BaseAddress != null);

            var eggGroupApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEggGroupApi>();
            Assert.True(eggGroupApi.HttpClient.BaseAddress != null);

            var encounterConditionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEncounterConditionApi>();
            Assert.True(encounterConditionApi.HttpClient.BaseAddress != null);

            var encounterConditionValueApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEncounterConditionValueApi>();
            Assert.True(encounterConditionValueApi.HttpClient.BaseAddress != null);

            var encounterMethodApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEncounterMethodApi>();
            Assert.True(encounterMethodApi.HttpClient.BaseAddress != null);

            var evolutionChainApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEvolutionChainApi>();
            Assert.True(evolutionChainApi.HttpClient.BaseAddress != null);

            var evolutionTriggerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEvolutionTriggerApi>();
            Assert.True(evolutionTriggerApi.HttpClient.BaseAddress != null);

            var genderApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGenderApi>();
            Assert.True(genderApi.HttpClient.BaseAddress != null);

            var generationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGenerationApi>();
            Assert.True(generationApi.HttpClient.BaseAddress != null);

            var growthRateApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGrowthRateApi>();
            Assert.True(growthRateApi.HttpClient.BaseAddress != null);

            var itemApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IItemApi>();
            Assert.True(itemApi.HttpClient.BaseAddress != null);

            var itemAttributeApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IItemAttributeApi>();
            Assert.True(itemAttributeApi.HttpClient.BaseAddress != null);

            var itemCategoryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IItemCategoryApi>();
            Assert.True(itemCategoryApi.HttpClient.BaseAddress != null);

            var itemFlingEffectApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IItemFlingEffectApi>();
            Assert.True(itemFlingEffectApi.HttpClient.BaseAddress != null);

            var itemPocketApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IItemPocketApi>();
            Assert.True(itemPocketApi.HttpClient.BaseAddress != null);

            var languageApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);

            var locationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILocationApi>();
            Assert.True(locationApi.HttpClient.BaseAddress != null);

            var locationAreaApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILocationAreaApi>();
            Assert.True(locationAreaApi.HttpClient.BaseAddress != null);

            var machineApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMachineApi>();
            Assert.True(machineApi.HttpClient.BaseAddress != null);

            var moveApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveApi>();
            Assert.True(moveApi.HttpClient.BaseAddress != null);

            var moveAilmentApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveAilmentApi>();
            Assert.True(moveAilmentApi.HttpClient.BaseAddress != null);

            var moveBattleStyleApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveBattleStyleApi>();
            Assert.True(moveBattleStyleApi.HttpClient.BaseAddress != null);

            var moveCategoryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveCategoryApi>();
            Assert.True(moveCategoryApi.HttpClient.BaseAddress != null);

            var moveDamageClassApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveDamageClassApi>();
            Assert.True(moveDamageClassApi.HttpClient.BaseAddress != null);

            var moveLearnMethodApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveLearnMethodApi>();
            Assert.True(moveLearnMethodApi.HttpClient.BaseAddress != null);

            var moveTargetApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMoveTargetApi>();
            Assert.True(moveTargetApi.HttpClient.BaseAddress != null);

            var natureApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<INatureApi>();
            Assert.True(natureApi.HttpClient.BaseAddress != null);

            var palParkAreaApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPalParkAreaApi>();
            Assert.True(palParkAreaApi.HttpClient.BaseAddress != null);

            var pokeathlonStatApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokeathlonStatApi>();
            Assert.True(pokeathlonStatApi.HttpClient.BaseAddress != null);

            var pokedexApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokedexApi>();
            Assert.True(pokedexApi.HttpClient.BaseAddress != null);

            var pokemonApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokemonApi>();
            Assert.True(pokemonApi.HttpClient.BaseAddress != null);

            var pokemonColorApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokemonColorApi>();
            Assert.True(pokemonColorApi.HttpClient.BaseAddress != null);

            var pokemonFormApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokemonFormApi>();
            Assert.True(pokemonFormApi.HttpClient.BaseAddress != null);

            var pokemonHabitatApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokemonHabitatApi>();
            Assert.True(pokemonHabitatApi.HttpClient.BaseAddress != null);

            var pokemonShapeApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokemonShapeApi>();
            Assert.True(pokemonShapeApi.HttpClient.BaseAddress != null);

            var pokemonSpeciesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPokemonSpeciesApi>();
            Assert.True(pokemonSpeciesApi.HttpClient.BaseAddress != null);

            var regionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRegionApi>();
            Assert.True(regionApi.HttpClient.BaseAddress != null);

            var statApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStatApi>();
            Assert.True(statApi.HttpClient.BaseAddress != null);

            var superContestEffectApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISuperContestEffectApi>();
            Assert.True(superContestEffectApi.HttpClient.BaseAddress != null);

            var typeApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITypeApi>();
            Assert.True(typeApi.HttpClient.BaseAddress != null);

            var versionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVersionApi>();
            Assert.True(versionApi.HttpClient.BaseAddress != null);

            var versionGroupApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVersionGroupApi>();
            Assert.True(versionGroupApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var abilityApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAbilityApi>();
            Assert.True(abilityApi.HttpClient.BaseAddress != null);
            
            var berryApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBerryApi>();
            Assert.True(berryApi.HttpClient.BaseAddress != null);
            
            var berryFirmnessApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBerryFirmnessApi>();
            Assert.True(berryFirmnessApi.HttpClient.BaseAddress != null);
            
            var berryFlavorApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBerryFlavorApi>();
            Assert.True(berryFlavorApi.HttpClient.BaseAddress != null);
            
            var characteristicApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICharacteristicApi>();
            Assert.True(characteristicApi.HttpClient.BaseAddress != null);
            
            var contestEffectApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContestEffectApi>();
            Assert.True(contestEffectApi.HttpClient.BaseAddress != null);
            
            var contestTypeApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContestTypeApi>();
            Assert.True(contestTypeApi.HttpClient.BaseAddress != null);
            
            var eggGroupApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEggGroupApi>();
            Assert.True(eggGroupApi.HttpClient.BaseAddress != null);
            
            var encounterConditionApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEncounterConditionApi>();
            Assert.True(encounterConditionApi.HttpClient.BaseAddress != null);
            
            var encounterConditionValueApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEncounterConditionValueApi>();
            Assert.True(encounterConditionValueApi.HttpClient.BaseAddress != null);
            
            var encounterMethodApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEncounterMethodApi>();
            Assert.True(encounterMethodApi.HttpClient.BaseAddress != null);
            
            var evolutionChainApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEvolutionChainApi>();
            Assert.True(evolutionChainApi.HttpClient.BaseAddress != null);
            
            var evolutionTriggerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEvolutionTriggerApi>();
            Assert.True(evolutionTriggerApi.HttpClient.BaseAddress != null);
            
            var genderApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGenderApi>();
            Assert.True(genderApi.HttpClient.BaseAddress != null);
            
            var generationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGenerationApi>();
            Assert.True(generationApi.HttpClient.BaseAddress != null);
            
            var growthRateApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGrowthRateApi>();
            Assert.True(growthRateApi.HttpClient.BaseAddress != null);
            
            var itemApi = _hostUsingAddWithAClient.Services.GetRequiredService<IItemApi>();
            Assert.True(itemApi.HttpClient.BaseAddress != null);
            
            var itemAttributeApi = _hostUsingAddWithAClient.Services.GetRequiredService<IItemAttributeApi>();
            Assert.True(itemAttributeApi.HttpClient.BaseAddress != null);
            
            var itemCategoryApi = _hostUsingAddWithAClient.Services.GetRequiredService<IItemCategoryApi>();
            Assert.True(itemCategoryApi.HttpClient.BaseAddress != null);
            
            var itemFlingEffectApi = _hostUsingAddWithAClient.Services.GetRequiredService<IItemFlingEffectApi>();
            Assert.True(itemFlingEffectApi.HttpClient.BaseAddress != null);
            
            var itemPocketApi = _hostUsingAddWithAClient.Services.GetRequiredService<IItemPocketApi>();
            Assert.True(itemPocketApi.HttpClient.BaseAddress != null);
            
            var languageApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);
            
            var locationApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILocationApi>();
            Assert.True(locationApi.HttpClient.BaseAddress != null);
            
            var locationAreaApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILocationAreaApi>();
            Assert.True(locationAreaApi.HttpClient.BaseAddress != null);
            
            var machineApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMachineApi>();
            Assert.True(machineApi.HttpClient.BaseAddress != null);
            
            var moveApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveApi>();
            Assert.True(moveApi.HttpClient.BaseAddress != null);
            
            var moveAilmentApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveAilmentApi>();
            Assert.True(moveAilmentApi.HttpClient.BaseAddress != null);
            
            var moveBattleStyleApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveBattleStyleApi>();
            Assert.True(moveBattleStyleApi.HttpClient.BaseAddress != null);
            
            var moveCategoryApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveCategoryApi>();
            Assert.True(moveCategoryApi.HttpClient.BaseAddress != null);
            
            var moveDamageClassApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveDamageClassApi>();
            Assert.True(moveDamageClassApi.HttpClient.BaseAddress != null);
            
            var moveLearnMethodApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveLearnMethodApi>();
            Assert.True(moveLearnMethodApi.HttpClient.BaseAddress != null);
            
            var moveTargetApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMoveTargetApi>();
            Assert.True(moveTargetApi.HttpClient.BaseAddress != null);
            
            var natureApi = _hostUsingAddWithAClient.Services.GetRequiredService<INatureApi>();
            Assert.True(natureApi.HttpClient.BaseAddress != null);
            
            var palParkAreaApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPalParkAreaApi>();
            Assert.True(palParkAreaApi.HttpClient.BaseAddress != null);
            
            var pokeathlonStatApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokeathlonStatApi>();
            Assert.True(pokeathlonStatApi.HttpClient.BaseAddress != null);
            
            var pokedexApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokedexApi>();
            Assert.True(pokedexApi.HttpClient.BaseAddress != null);
            
            var pokemonApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokemonApi>();
            Assert.True(pokemonApi.HttpClient.BaseAddress != null);
            
            var pokemonColorApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokemonColorApi>();
            Assert.True(pokemonColorApi.HttpClient.BaseAddress != null);
            
            var pokemonFormApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokemonFormApi>();
            Assert.True(pokemonFormApi.HttpClient.BaseAddress != null);
            
            var pokemonHabitatApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokemonHabitatApi>();
            Assert.True(pokemonHabitatApi.HttpClient.BaseAddress != null);
            
            var pokemonShapeApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokemonShapeApi>();
            Assert.True(pokemonShapeApi.HttpClient.BaseAddress != null);
            
            var pokemonSpeciesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPokemonSpeciesApi>();
            Assert.True(pokemonSpeciesApi.HttpClient.BaseAddress != null);
            
            var regionApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRegionApi>();
            Assert.True(regionApi.HttpClient.BaseAddress != null);
            
            var statApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStatApi>();
            Assert.True(statApi.HttpClient.BaseAddress != null);
            
            var superContestEffectApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISuperContestEffectApi>();
            Assert.True(superContestEffectApi.HttpClient.BaseAddress != null);
            
            var typeApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITypeApi>();
            Assert.True(typeApi.HttpClient.BaseAddress != null);
            
            var versionApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVersionApi>();
            Assert.True(versionApi.HttpClient.BaseAddress != null);
            
            var versionGroupApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVersionGroupApi>();
            Assert.True(versionGroupApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var abilityApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAbilityApi>();
            Assert.True(abilityApi.HttpClient.BaseAddress != null);

            var berryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBerryApi>();
            Assert.True(berryApi.HttpClient.BaseAddress != null);

            var berryFirmnessApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBerryFirmnessApi>();
            Assert.True(berryFirmnessApi.HttpClient.BaseAddress != null);

            var berryFlavorApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBerryFlavorApi>();
            Assert.True(berryFlavorApi.HttpClient.BaseAddress != null);

            var characteristicApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICharacteristicApi>();
            Assert.True(characteristicApi.HttpClient.BaseAddress != null);

            var contestEffectApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContestEffectApi>();
            Assert.True(contestEffectApi.HttpClient.BaseAddress != null);

            var contestTypeApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContestTypeApi>();
            Assert.True(contestTypeApi.HttpClient.BaseAddress != null);

            var eggGroupApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEggGroupApi>();
            Assert.True(eggGroupApi.HttpClient.BaseAddress != null);

            var encounterConditionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEncounterConditionApi>();
            Assert.True(encounterConditionApi.HttpClient.BaseAddress != null);

            var encounterConditionValueApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEncounterConditionValueApi>();
            Assert.True(encounterConditionValueApi.HttpClient.BaseAddress != null);

            var encounterMethodApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEncounterMethodApi>();
            Assert.True(encounterMethodApi.HttpClient.BaseAddress != null);

            var evolutionChainApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEvolutionChainApi>();
            Assert.True(evolutionChainApi.HttpClient.BaseAddress != null);

            var evolutionTriggerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEvolutionTriggerApi>();
            Assert.True(evolutionTriggerApi.HttpClient.BaseAddress != null);

            var genderApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGenderApi>();
            Assert.True(genderApi.HttpClient.BaseAddress != null);

            var generationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGenerationApi>();
            Assert.True(generationApi.HttpClient.BaseAddress != null);

            var growthRateApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGrowthRateApi>();
            Assert.True(growthRateApi.HttpClient.BaseAddress != null);

            var itemApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IItemApi>();
            Assert.True(itemApi.HttpClient.BaseAddress != null);

            var itemAttributeApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IItemAttributeApi>();
            Assert.True(itemAttributeApi.HttpClient.BaseAddress != null);

            var itemCategoryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IItemCategoryApi>();
            Assert.True(itemCategoryApi.HttpClient.BaseAddress != null);

            var itemFlingEffectApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IItemFlingEffectApi>();
            Assert.True(itemFlingEffectApi.HttpClient.BaseAddress != null);

            var itemPocketApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IItemPocketApi>();
            Assert.True(itemPocketApi.HttpClient.BaseAddress != null);

            var languageApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);

            var locationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILocationApi>();
            Assert.True(locationApi.HttpClient.BaseAddress != null);

            var locationAreaApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILocationAreaApi>();
            Assert.True(locationAreaApi.HttpClient.BaseAddress != null);

            var machineApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMachineApi>();
            Assert.True(machineApi.HttpClient.BaseAddress != null);

            var moveApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveApi>();
            Assert.True(moveApi.HttpClient.BaseAddress != null);

            var moveAilmentApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveAilmentApi>();
            Assert.True(moveAilmentApi.HttpClient.BaseAddress != null);

            var moveBattleStyleApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveBattleStyleApi>();
            Assert.True(moveBattleStyleApi.HttpClient.BaseAddress != null);

            var moveCategoryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveCategoryApi>();
            Assert.True(moveCategoryApi.HttpClient.BaseAddress != null);

            var moveDamageClassApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveDamageClassApi>();
            Assert.True(moveDamageClassApi.HttpClient.BaseAddress != null);

            var moveLearnMethodApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveLearnMethodApi>();
            Assert.True(moveLearnMethodApi.HttpClient.BaseAddress != null);

            var moveTargetApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMoveTargetApi>();
            Assert.True(moveTargetApi.HttpClient.BaseAddress != null);

            var natureApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<INatureApi>();
            Assert.True(natureApi.HttpClient.BaseAddress != null);

            var palParkAreaApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPalParkAreaApi>();
            Assert.True(palParkAreaApi.HttpClient.BaseAddress != null);

            var pokeathlonStatApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokeathlonStatApi>();
            Assert.True(pokeathlonStatApi.HttpClient.BaseAddress != null);

            var pokedexApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokedexApi>();
            Assert.True(pokedexApi.HttpClient.BaseAddress != null);

            var pokemonApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokemonApi>();
            Assert.True(pokemonApi.HttpClient.BaseAddress != null);

            var pokemonColorApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokemonColorApi>();
            Assert.True(pokemonColorApi.HttpClient.BaseAddress != null);

            var pokemonFormApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokemonFormApi>();
            Assert.True(pokemonFormApi.HttpClient.BaseAddress != null);

            var pokemonHabitatApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokemonHabitatApi>();
            Assert.True(pokemonHabitatApi.HttpClient.BaseAddress != null);

            var pokemonShapeApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokemonShapeApi>();
            Assert.True(pokemonShapeApi.HttpClient.BaseAddress != null);

            var pokemonSpeciesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPokemonSpeciesApi>();
            Assert.True(pokemonSpeciesApi.HttpClient.BaseAddress != null);

            var regionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRegionApi>();
            Assert.True(regionApi.HttpClient.BaseAddress != null);

            var statApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStatApi>();
            Assert.True(statApi.HttpClient.BaseAddress != null);

            var superContestEffectApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISuperContestEffectApi>();
            Assert.True(superContestEffectApi.HttpClient.BaseAddress != null);

            var typeApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITypeApi>();
            Assert.True(typeApi.HttpClient.BaseAddress != null);

            var versionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVersionApi>();
            Assert.True(versionApi.HttpClient.BaseAddress != null);

            var versionGroupApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVersionGroupApi>();
            Assert.True(versionGroupApi.HttpClient.BaseAddress != null);
        }
    }
}
