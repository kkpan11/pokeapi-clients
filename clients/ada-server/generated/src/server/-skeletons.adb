--  
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 20220523
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.4.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   Media_List_1 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Text);

   package body Skeleton is


      package API_Ability_List is
         new Swagger.Servers.Operation
            (Handler => Ability_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/ability/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Ability_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Ability_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Ability_List;

      package API_Ability_Read is
         new Swagger.Servers.Operation
            (Handler => Ability_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/ability/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Ability_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ability_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Ability_Read;

      package API_Berry_List is
         new Swagger.Servers.Operation
            (Handler => Berry_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Berry_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Berry_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_List;

      package API_Berry_Read is
         new Swagger.Servers.Operation
            (Handler => Berry_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Berry_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Berry_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Read;

      package API_Berry_Firmness_List is
         new Swagger.Servers.Operation
            (Handler => Berry_Firmness_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-firmness/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Berry_Firmness_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Berry_Firmness_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Firmness_List;

      package API_Berry_Firmness_Read is
         new Swagger.Servers.Operation
            (Handler => Berry_Firmness_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-firmness/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Berry_Firmness_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Berry_Firmness_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Firmness_Read;

      package API_Berry_Flavor_List is
         new Swagger.Servers.Operation
            (Handler => Berry_Flavor_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-flavor/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Berry_Flavor_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Berry_Flavor_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Flavor_List;

      package API_Berry_Flavor_Read is
         new Swagger.Servers.Operation
            (Handler => Berry_Flavor_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-flavor/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Berry_Flavor_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Berry_Flavor_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Flavor_Read;

      package API_Characteristic_List is
         new Swagger.Servers.Operation
            (Handler => Characteristic_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/characteristic/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Characteristic_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Characteristic_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Characteristic_List;

      package API_Characteristic_Read is
         new Swagger.Servers.Operation
            (Handler => Characteristic_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/characteristic/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Characteristic_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Characteristic_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Characteristic_Read;

      package API_Contest_Effect_List is
         new Swagger.Servers.Operation
            (Handler => Contest_Effect_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-effect/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Contest_Effect_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Contest_Effect_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Effect_List;

      package API_Contest_Effect_Read is
         new Swagger.Servers.Operation
            (Handler => Contest_Effect_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-effect/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Contest_Effect_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Contest_Effect_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Effect_Read;

      package API_Contest_Type_List is
         new Swagger.Servers.Operation
            (Handler => Contest_Type_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-type/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Contest_Type_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Contest_Type_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Type_List;

      package API_Contest_Type_Read is
         new Swagger.Servers.Operation
            (Handler => Contest_Type_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-type/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Contest_Type_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Contest_Type_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Type_Read;

      package API_Egg_Group_List is
         new Swagger.Servers.Operation
            (Handler => Egg_Group_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/egg-group/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Egg_Group_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Egg_Group_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Egg_Group_List;

      package API_Egg_Group_Read is
         new Swagger.Servers.Operation
            (Handler => Egg_Group_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/egg-group/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Egg_Group_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Egg_Group_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Egg_Group_Read;

      package API_Encounter_Condition_List is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Encounter_Condition_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Encounter_Condition_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_List;

      package API_Encounter_Condition_Read is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Encounter_Condition_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Encounter_Condition_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_Read;

      package API_Encounter_Condition_Value_List is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_Value_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition-value/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Encounter_Condition_Value_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Encounter_Condition_Value_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_Value_List;

      package API_Encounter_Condition_Value_Read is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_Value_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition-value/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Encounter_Condition_Value_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Encounter_Condition_Value_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_Value_Read;

      package API_Encounter_Method_List is
         new Swagger.Servers.Operation
            (Handler => Encounter_Method_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-method/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Encounter_Method_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Encounter_Method_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Method_List;

      package API_Encounter_Method_Read is
         new Swagger.Servers.Operation
            (Handler => Encounter_Method_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-method/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Encounter_Method_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Encounter_Method_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Method_Read;

      package API_Evolution_Chain_List is
         new Swagger.Servers.Operation
            (Handler => Evolution_Chain_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-chain/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Evolution_Chain_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Evolution_Chain_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Chain_List;

      package API_Evolution_Chain_Read is
         new Swagger.Servers.Operation
            (Handler => Evolution_Chain_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-chain/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Evolution_Chain_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Evolution_Chain_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Chain_Read;

      package API_Evolution_Trigger_List is
         new Swagger.Servers.Operation
            (Handler => Evolution_Trigger_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-trigger/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Evolution_Trigger_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Evolution_Trigger_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Trigger_List;

      package API_Evolution_Trigger_Read is
         new Swagger.Servers.Operation
            (Handler => Evolution_Trigger_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-trigger/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Evolution_Trigger_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Evolution_Trigger_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Trigger_Read;

      package API_Gender_List is
         new Swagger.Servers.Operation
            (Handler => Gender_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/gender/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Gender_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Gender_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Gender_List;

      package API_Gender_Read is
         new Swagger.Servers.Operation
            (Handler => Gender_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/gender/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Gender_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Gender_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Gender_Read;

      package API_Generation_List is
         new Swagger.Servers.Operation
            (Handler => Generation_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/generation/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Generation_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Generation_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Generation_List;

      package API_Generation_Read is
         new Swagger.Servers.Operation
            (Handler => Generation_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/generation/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Generation_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Generation_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Generation_Read;

      package API_Growth_Rate_List is
         new Swagger.Servers.Operation
            (Handler => Growth_Rate_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/growth-rate/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Growth_Rate_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Growth_Rate_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Growth_Rate_List;

      package API_Growth_Rate_Read is
         new Swagger.Servers.Operation
            (Handler => Growth_Rate_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/growth-rate/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Growth_Rate_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Growth_Rate_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Growth_Rate_Read;

      package API_Item_List is
         new Swagger.Servers.Operation
            (Handler => Item_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Item_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_List;

      package API_Item_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Item_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Read;

      package API_Item_Attribute_List is
         new Swagger.Servers.Operation
            (Handler => Item_Attribute_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-attribute/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Attribute_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Item_Attribute_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Attribute_List;

      package API_Item_Attribute_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Attribute_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-attribute/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Attribute_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Item_Attribute_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Attribute_Read;

      package API_Item_Category_List is
         new Swagger.Servers.Operation
            (Handler => Item_Category_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-category/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Category_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Item_Category_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Category_List;

      package API_Item_Category_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Category_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-category/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Category_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Item_Category_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Category_Read;

      package API_Item_Fling_Effect_List is
         new Swagger.Servers.Operation
            (Handler => Item_Fling_Effect_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-fling-effect/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Fling_Effect_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Item_Fling_Effect_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Fling_Effect_List;

      package API_Item_Fling_Effect_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Fling_Effect_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-fling-effect/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Fling_Effect_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Item_Fling_Effect_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Fling_Effect_Read;

      package API_Item_Pocket_List is
         new Swagger.Servers.Operation
            (Handler => Item_Pocket_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-pocket/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Pocket_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Item_Pocket_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Pocket_List;

      package API_Item_Pocket_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Pocket_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-pocket/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Item_Pocket_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Item_Pocket_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Pocket_Read;

      package API_Language_List is
         new Swagger.Servers.Operation
            (Handler => Language_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/language/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Language_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Language_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Language_List;

      package API_Language_Read is
         new Swagger.Servers.Operation
            (Handler => Language_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/language/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Language_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Language_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Language_Read;

      package API_Location_List is
         new Swagger.Servers.Operation
            (Handler => Location_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Location_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Location_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_List;

      package API_Location_Read is
         new Swagger.Servers.Operation
            (Handler => Location_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Location_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Location_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_Read;

      package API_Location_Area_List is
         new Swagger.Servers.Operation
            (Handler => Location_Area_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location-area/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Location_Area_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Location_Area_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_Area_List;

      package API_Location_Area_Read is
         new Swagger.Servers.Operation
            (Handler => Location_Area_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location-area/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Location_Area_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Location_Area_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_Area_Read;

      package API_Machine_List is
         new Swagger.Servers.Operation
            (Handler => Machine_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/machine/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Machine_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Machine_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Machine_List;

      package API_Machine_Read is
         new Swagger.Servers.Operation
            (Handler => Machine_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/machine/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Machine_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Machine_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Machine_Read;

      package API_Move_List is
         new Swagger.Servers.Operation
            (Handler => Move_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_List;

      package API_Move_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Read;

      package API_Move_Ailment_List is
         new Swagger.Servers.Operation
            (Handler => Move_Ailment_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-ailment/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Ailment_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_Ailment_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Ailment_List;

      package API_Move_Ailment_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Ailment_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-ailment/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Ailment_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Ailment_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Ailment_Read;

      package API_Move_Battle_Style_List is
         new Swagger.Servers.Operation
            (Handler => Move_Battle_Style_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-battle-style/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Battle_Style_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_Battle_Style_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Battle_Style_List;

      package API_Move_Battle_Style_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Battle_Style_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-battle-style/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Battle_Style_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Battle_Style_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Battle_Style_Read;

      package API_Move_Category_List is
         new Swagger.Servers.Operation
            (Handler => Move_Category_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-category/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Category_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_Category_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Category_List;

      package API_Move_Category_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Category_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-category/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Category_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Category_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Category_Read;

      package API_Move_Damage_Class_List is
         new Swagger.Servers.Operation
            (Handler => Move_Damage_Class_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-damage-class/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Damage_Class_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_Damage_Class_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Damage_Class_List;

      package API_Move_Damage_Class_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Damage_Class_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-damage-class/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Damage_Class_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Damage_Class_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Damage_Class_Read;

      package API_Move_Learn_Method_List is
         new Swagger.Servers.Operation
            (Handler => Move_Learn_Method_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-learn-method/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Learn_Method_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_Learn_Method_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Learn_Method_List;

      package API_Move_Learn_Method_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Learn_Method_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-learn-method/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Learn_Method_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Learn_Method_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Learn_Method_Read;

      package API_Move_Target_List is
         new Swagger.Servers.Operation
            (Handler => Move_Target_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-target/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Target_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Move_Target_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Target_List;

      package API_Move_Target_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Target_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-target/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Move_Target_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Move_Target_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Target_Read;

      package API_Nature_List is
         new Swagger.Servers.Operation
            (Handler => Nature_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/nature/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Nature_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Nature_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Nature_List;

      package API_Nature_Read is
         new Swagger.Servers.Operation
            (Handler => Nature_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/nature/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Nature_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Nature_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Nature_Read;

      package API_Pal_Park_Area_List is
         new Swagger.Servers.Operation
            (Handler => Pal_Park_Area_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pal-park-area/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pal_Park_Area_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pal_Park_Area_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pal_Park_Area_List;

      package API_Pal_Park_Area_Read is
         new Swagger.Servers.Operation
            (Handler => Pal_Park_Area_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pal-park-area/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pal_Park_Area_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pal_Park_Area_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pal_Park_Area_Read;

      package API_Pokeathlon_Stat_List is
         new Swagger.Servers.Operation
            (Handler => Pokeathlon_Stat_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokeathlon-stat/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokeathlon_Stat_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokeathlon_Stat_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokeathlon_Stat_List;

      package API_Pokeathlon_Stat_Read is
         new Swagger.Servers.Operation
            (Handler => Pokeathlon_Stat_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokeathlon-stat/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokeathlon_Stat_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokeathlon_Stat_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokeathlon_Stat_Read;

      package API_Pokedex_List is
         new Swagger.Servers.Operation
            (Handler => Pokedex_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokedex/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokedex_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokedex_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokedex_List;

      package API_Pokedex_Read is
         new Swagger.Servers.Operation
            (Handler => Pokedex_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokedex/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokedex_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokedex_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokedex_Read;

      package API_Pokemon_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokemon_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_List;

      package API_Pokemon_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokemon_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Read;

      package API_Pokemon_Color_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Color_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-color/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Color_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokemon_Color_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Color_List;

      package API_Pokemon_Color_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Color_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-color/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Color_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokemon_Color_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Color_Read;

      package API_Pokemon_Form_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Form_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-form/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Form_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokemon_Form_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Form_List;

      package API_Pokemon_Form_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Form_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-form/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Form_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokemon_Form_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Form_Read;

      package API_Pokemon_Habitat_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Habitat_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-habitat/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Habitat_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokemon_Habitat_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Habitat_List;

      package API_Pokemon_Habitat_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Habitat_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-habitat/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Habitat_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokemon_Habitat_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Habitat_Read;

      package API_Pokemon_Shape_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Shape_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-shape/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Shape_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokemon_Shape_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Shape_List;

      package API_Pokemon_Shape_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Shape_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-shape/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Shape_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokemon_Shape_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Shape_Read;

      package API_Pokemon_Species_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Species_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-species/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Species_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Pokemon_Species_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Species_List;

      package API_Pokemon_Species_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Species_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-species/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Pokemon_Species_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pokemon_Species_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Species_Read;

      package API_Region_List is
         new Swagger.Servers.Operation
            (Handler => Region_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/region/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Region_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Region_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Region_List;

      package API_Region_Read is
         new Swagger.Servers.Operation
            (Handler => Region_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/region/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Region_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Region_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Region_Read;

      package API_Stat_List is
         new Swagger.Servers.Operation
            (Handler => Stat_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/stat/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Stat_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Stat_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Stat_List;

      package API_Stat_Read is
         new Swagger.Servers.Operation
            (Handler => Stat_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/stat/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Stat_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Stat_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Stat_Read;

      package API_Super_Contest_Effect_List is
         new Swagger.Servers.Operation
            (Handler => Super_Contest_Effect_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/super-contest-effect/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Super_Contest_Effect_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Super_Contest_Effect_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Super_Contest_Effect_List;

      package API_Super_Contest_Effect_Read is
         new Swagger.Servers.Operation
            (Handler => Super_Contest_Effect_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/super-contest-effect/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Super_Contest_Effect_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Super_Contest_Effect_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Super_Contest_Effect_Read;

      package API_Type_List is
         new Swagger.Servers.Operation
            (Handler => Type_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/type/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Type_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Type_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Type_List;

      package API_Type_Read is
         new Swagger.Servers.Operation
            (Handler => Type_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/type/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Type_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Type_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Type_Read;

      package API_Version_List is
         new Swagger.Servers.Operation
            (Handler => Version_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Version_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Version_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_List;

      package API_Version_Read is
         new Swagger.Servers.Operation
            (Handler => Version_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Version_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Version_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_Read;

      package API_Version_Group_List is
         new Swagger.Servers.Operation
            (Handler => Version_Group_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version-group/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Version_Group_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Impl.Version_Group_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_Group_List;

      package API_Version_Group_Read is
         new Swagger.Servers.Operation
            (Handler => Version_Group_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version-group/{id}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Version_Group_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer;
         Result : Swagger.UString;
      begin
         
         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Version_Group_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_Group_Read;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Ability_List.Definition);
         Swagger.Servers.Register (Server, API_Ability_Read.Definition);
         Swagger.Servers.Register (Server, API_Berry_List.Definition);
         Swagger.Servers.Register (Server, API_Berry_Read.Definition);
         Swagger.Servers.Register (Server, API_Berry_Firmness_List.Definition);
         Swagger.Servers.Register (Server, API_Berry_Firmness_Read.Definition);
         Swagger.Servers.Register (Server, API_Berry_Flavor_List.Definition);
         Swagger.Servers.Register (Server, API_Berry_Flavor_Read.Definition);
         Swagger.Servers.Register (Server, API_Characteristic_List.Definition);
         Swagger.Servers.Register (Server, API_Characteristic_Read.Definition);
         Swagger.Servers.Register (Server, API_Contest_Effect_List.Definition);
         Swagger.Servers.Register (Server, API_Contest_Effect_Read.Definition);
         Swagger.Servers.Register (Server, API_Contest_Type_List.Definition);
         Swagger.Servers.Register (Server, API_Contest_Type_Read.Definition);
         Swagger.Servers.Register (Server, API_Egg_Group_List.Definition);
         Swagger.Servers.Register (Server, API_Egg_Group_Read.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_List.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_Read.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_Value_List.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_Value_Read.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Method_List.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Method_Read.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Chain_List.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Chain_Read.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Trigger_List.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Trigger_Read.Definition);
         Swagger.Servers.Register (Server, API_Gender_List.Definition);
         Swagger.Servers.Register (Server, API_Gender_Read.Definition);
         Swagger.Servers.Register (Server, API_Generation_List.Definition);
         Swagger.Servers.Register (Server, API_Generation_Read.Definition);
         Swagger.Servers.Register (Server, API_Growth_Rate_List.Definition);
         Swagger.Servers.Register (Server, API_Growth_Rate_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Attribute_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Attribute_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Category_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Category_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Fling_Effect_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Fling_Effect_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Pocket_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Pocket_Read.Definition);
         Swagger.Servers.Register (Server, API_Language_List.Definition);
         Swagger.Servers.Register (Server, API_Language_Read.Definition);
         Swagger.Servers.Register (Server, API_Location_List.Definition);
         Swagger.Servers.Register (Server, API_Location_Read.Definition);
         Swagger.Servers.Register (Server, API_Location_Area_List.Definition);
         Swagger.Servers.Register (Server, API_Location_Area_Read.Definition);
         Swagger.Servers.Register (Server, API_Machine_List.Definition);
         Swagger.Servers.Register (Server, API_Machine_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Ailment_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Ailment_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Battle_Style_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Battle_Style_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Category_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Category_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Damage_Class_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Damage_Class_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Learn_Method_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Learn_Method_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Target_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Target_Read.Definition);
         Swagger.Servers.Register (Server, API_Nature_List.Definition);
         Swagger.Servers.Register (Server, API_Nature_Read.Definition);
         Swagger.Servers.Register (Server, API_Pal_Park_Area_List.Definition);
         Swagger.Servers.Register (Server, API_Pal_Park_Area_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokeathlon_Stat_List.Definition);
         Swagger.Servers.Register (Server, API_Pokeathlon_Stat_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokedex_List.Definition);
         Swagger.Servers.Register (Server, API_Pokedex_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Color_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Color_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Form_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Form_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Habitat_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Habitat_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Shape_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Shape_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Species_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Species_Read.Definition);
         Swagger.Servers.Register (Server, API_Region_List.Definition);
         Swagger.Servers.Register (Server, API_Region_Read.Definition);
         Swagger.Servers.Register (Server, API_Stat_List.Definition);
         Swagger.Servers.Register (Server, API_Stat_Read.Definition);
         Swagger.Servers.Register (Server, API_Super_Contest_Effect_List.Definition);
         Swagger.Servers.Register (Server, API_Super_Contest_Effect_Read.Definition);
         Swagger.Servers.Register (Server, API_Type_List.Definition);
         Swagger.Servers.Register (Server, API_Type_Read.Definition);
         Swagger.Servers.Register (Server, API_Version_List.Definition);
         Swagger.Servers.Register (Server, API_Version_Read.Definition);
         Swagger.Servers.Register (Server, API_Version_Group_List.Definition);
         Swagger.Servers.Register (Server, API_Version_Group_Read.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  
      procedure Ability_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Ability_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Ability_List;

      package API_Ability_List is
         new Swagger.Servers.Operation
            (Handler => Ability_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/ability/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Ability_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ability_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Ability_Read;

      package API_Ability_Read is
         new Swagger.Servers.Operation
            (Handler => Ability_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/ability/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Berry_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Berry_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_List;

      package API_Berry_List is
         new Swagger.Servers.Operation
            (Handler => Berry_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Berry_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Berry_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Read;

      package API_Berry_Read is
         new Swagger.Servers.Operation
            (Handler => Berry_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Berry_Firmness_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Berry_Firmness_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Firmness_List;

      package API_Berry_Firmness_List is
         new Swagger.Servers.Operation
            (Handler => Berry_Firmness_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-firmness/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Berry_Firmness_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Berry_Firmness_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Firmness_Read;

      package API_Berry_Firmness_Read is
         new Swagger.Servers.Operation
            (Handler => Berry_Firmness_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-firmness/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Berry_Flavor_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Berry_Flavor_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Flavor_List;

      package API_Berry_Flavor_List is
         new Swagger.Servers.Operation
            (Handler => Berry_Flavor_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-flavor/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Berry_Flavor_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Berry_Flavor_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Berry_Flavor_Read;

      package API_Berry_Flavor_Read is
         new Swagger.Servers.Operation
            (Handler => Berry_Flavor_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/berry-flavor/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Characteristic_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Characteristic_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Characteristic_List;

      package API_Characteristic_List is
         new Swagger.Servers.Operation
            (Handler => Characteristic_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/characteristic/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Characteristic_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Characteristic_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Characteristic_Read;

      package API_Characteristic_Read is
         new Swagger.Servers.Operation
            (Handler => Characteristic_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/characteristic/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Contest_Effect_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Contest_Effect_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Effect_List;

      package API_Contest_Effect_List is
         new Swagger.Servers.Operation
            (Handler => Contest_Effect_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-effect/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Contest_Effect_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Contest_Effect_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Effect_Read;

      package API_Contest_Effect_Read is
         new Swagger.Servers.Operation
            (Handler => Contest_Effect_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-effect/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Contest_Type_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Contest_Type_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Type_List;

      package API_Contest_Type_List is
         new Swagger.Servers.Operation
            (Handler => Contest_Type_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-type/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Contest_Type_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Contest_Type_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Contest_Type_Read;

      package API_Contest_Type_Read is
         new Swagger.Servers.Operation
            (Handler => Contest_Type_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/contest-type/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Egg_Group_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Egg_Group_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Egg_Group_List;

      package API_Egg_Group_List is
         new Swagger.Servers.Operation
            (Handler => Egg_Group_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/egg-group/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Egg_Group_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Egg_Group_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Egg_Group_Read;

      package API_Egg_Group_Read is
         new Swagger.Servers.Operation
            (Handler => Egg_Group_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/egg-group/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Encounter_Condition_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Encounter_Condition_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_List;

      package API_Encounter_Condition_List is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Encounter_Condition_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Encounter_Condition_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_Read;

      package API_Encounter_Condition_Read is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Encounter_Condition_Value_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Encounter_Condition_Value_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_Value_List;

      package API_Encounter_Condition_Value_List is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_Value_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition-value/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Encounter_Condition_Value_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Encounter_Condition_Value_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Condition_Value_Read;

      package API_Encounter_Condition_Value_Read is
         new Swagger.Servers.Operation
            (Handler => Encounter_Condition_Value_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-condition-value/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Encounter_Method_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Encounter_Method_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Method_List;

      package API_Encounter_Method_List is
         new Swagger.Servers.Operation
            (Handler => Encounter_Method_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-method/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Encounter_Method_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Encounter_Method_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Encounter_Method_Read;

      package API_Encounter_Method_Read is
         new Swagger.Servers.Operation
            (Handler => Encounter_Method_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/encounter-method/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Evolution_Chain_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Evolution_Chain_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Chain_List;

      package API_Evolution_Chain_List is
         new Swagger.Servers.Operation
            (Handler => Evolution_Chain_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-chain/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Evolution_Chain_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Evolution_Chain_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Chain_Read;

      package API_Evolution_Chain_Read is
         new Swagger.Servers.Operation
            (Handler => Evolution_Chain_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-chain/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Evolution_Trigger_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Evolution_Trigger_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Trigger_List;

      package API_Evolution_Trigger_List is
         new Swagger.Servers.Operation
            (Handler => Evolution_Trigger_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-trigger/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Evolution_Trigger_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Evolution_Trigger_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Evolution_Trigger_Read;

      package API_Evolution_Trigger_Read is
         new Swagger.Servers.Operation
            (Handler => Evolution_Trigger_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/evolution-trigger/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Gender_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Gender_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Gender_List;

      package API_Gender_List is
         new Swagger.Servers.Operation
            (Handler => Gender_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/gender/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Gender_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Gender_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Gender_Read;

      package API_Gender_Read is
         new Swagger.Servers.Operation
            (Handler => Gender_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/gender/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Generation_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Generation_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Generation_List;

      package API_Generation_List is
         new Swagger.Servers.Operation
            (Handler => Generation_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/generation/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Generation_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Generation_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Generation_Read;

      package API_Generation_Read is
         new Swagger.Servers.Operation
            (Handler => Generation_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/generation/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Growth_Rate_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Growth_Rate_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Growth_Rate_List;

      package API_Growth_Rate_List is
         new Swagger.Servers.Operation
            (Handler => Growth_Rate_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/growth-rate/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Growth_Rate_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Growth_Rate_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Growth_Rate_Read;

      package API_Growth_Rate_Read is
         new Swagger.Servers.Operation
            (Handler => Growth_Rate_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/growth-rate/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Item_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_List;

      package API_Item_List is
         new Swagger.Servers.Operation
            (Handler => Item_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Item_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Read;

      package API_Item_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Attribute_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Item_Attribute_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Attribute_List;

      package API_Item_Attribute_List is
         new Swagger.Servers.Operation
            (Handler => Item_Attribute_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-attribute/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Attribute_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Item_Attribute_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Attribute_Read;

      package API_Item_Attribute_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Attribute_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-attribute/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Category_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Item_Category_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Category_List;

      package API_Item_Category_List is
         new Swagger.Servers.Operation
            (Handler => Item_Category_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-category/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Category_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Item_Category_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Category_Read;

      package API_Item_Category_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Category_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-category/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Fling_Effect_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Item_Fling_Effect_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Fling_Effect_List;

      package API_Item_Fling_Effect_List is
         new Swagger.Servers.Operation
            (Handler => Item_Fling_Effect_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-fling-effect/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Fling_Effect_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Item_Fling_Effect_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Fling_Effect_Read;

      package API_Item_Fling_Effect_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Fling_Effect_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-fling-effect/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Pocket_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Item_Pocket_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Pocket_List;

      package API_Item_Pocket_List is
         new Swagger.Servers.Operation
            (Handler => Item_Pocket_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-pocket/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Item_Pocket_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Item_Pocket_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Item_Pocket_Read;

      package API_Item_Pocket_Read is
         new Swagger.Servers.Operation
            (Handler => Item_Pocket_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/item-pocket/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Language_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Language_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Language_List;

      package API_Language_List is
         new Swagger.Servers.Operation
            (Handler => Language_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/language/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Language_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Language_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Language_Read;

      package API_Language_Read is
         new Swagger.Servers.Operation
            (Handler => Language_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/language/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Location_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Location_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_List;

      package API_Location_List is
         new Swagger.Servers.Operation
            (Handler => Location_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Location_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Location_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_Read;

      package API_Location_Read is
         new Swagger.Servers.Operation
            (Handler => Location_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Location_Area_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Location_Area_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_Area_List;

      package API_Location_Area_List is
         new Swagger.Servers.Operation
            (Handler => Location_Area_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location-area/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Location_Area_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Location_Area_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Location_Area_Read;

      package API_Location_Area_Read is
         new Swagger.Servers.Operation
            (Handler => Location_Area_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/location-area/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Machine_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Machine_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Machine_List;

      package API_Machine_List is
         new Swagger.Servers.Operation
            (Handler => Machine_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/machine/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Machine_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Machine_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Machine_Read;

      package API_Machine_Read is
         new Swagger.Servers.Operation
            (Handler => Machine_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/machine/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_List;

      package API_Move_List is
         new Swagger.Servers.Operation
            (Handler => Move_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Read;

      package API_Move_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Ailment_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_Ailment_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Ailment_List;

      package API_Move_Ailment_List is
         new Swagger.Servers.Operation
            (Handler => Move_Ailment_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-ailment/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Ailment_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Ailment_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Ailment_Read;

      package API_Move_Ailment_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Ailment_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-ailment/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Battle_Style_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_Battle_Style_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Battle_Style_List;

      package API_Move_Battle_Style_List is
         new Swagger.Servers.Operation
            (Handler => Move_Battle_Style_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-battle-style/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Battle_Style_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Battle_Style_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Battle_Style_Read;

      package API_Move_Battle_Style_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Battle_Style_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-battle-style/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Category_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_Category_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Category_List;

      package API_Move_Category_List is
         new Swagger.Servers.Operation
            (Handler => Move_Category_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-category/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Category_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Category_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Category_Read;

      package API_Move_Category_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Category_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-category/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Damage_Class_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_Damage_Class_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Damage_Class_List;

      package API_Move_Damage_Class_List is
         new Swagger.Servers.Operation
            (Handler => Move_Damage_Class_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-damage-class/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Damage_Class_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Damage_Class_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Damage_Class_Read;

      package API_Move_Damage_Class_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Damage_Class_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-damage-class/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Learn_Method_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_Learn_Method_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Learn_Method_List;

      package API_Move_Learn_Method_List is
         new Swagger.Servers.Operation
            (Handler => Move_Learn_Method_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-learn-method/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Learn_Method_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Learn_Method_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Learn_Method_Read;

      package API_Move_Learn_Method_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Learn_Method_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-learn-method/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Target_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Move_Target_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Target_List;

      package API_Move_Target_List is
         new Swagger.Servers.Operation
            (Handler => Move_Target_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-target/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Move_Target_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Move_Target_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Move_Target_Read;

      package API_Move_Target_Read is
         new Swagger.Servers.Operation
            (Handler => Move_Target_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/move-target/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Nature_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Nature_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Nature_List;

      package API_Nature_List is
         new Swagger.Servers.Operation
            (Handler => Nature_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/nature/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Nature_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Nature_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Nature_Read;

      package API_Nature_Read is
         new Swagger.Servers.Operation
            (Handler => Nature_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/nature/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pal_Park_Area_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pal_Park_Area_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pal_Park_Area_List;

      package API_Pal_Park_Area_List is
         new Swagger.Servers.Operation
            (Handler => Pal_Park_Area_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pal-park-area/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pal_Park_Area_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pal_Park_Area_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pal_Park_Area_Read;

      package API_Pal_Park_Area_Read is
         new Swagger.Servers.Operation
            (Handler => Pal_Park_Area_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pal-park-area/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokeathlon_Stat_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokeathlon_Stat_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokeathlon_Stat_List;

      package API_Pokeathlon_Stat_List is
         new Swagger.Servers.Operation
            (Handler => Pokeathlon_Stat_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokeathlon-stat/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokeathlon_Stat_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokeathlon_Stat_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokeathlon_Stat_Read;

      package API_Pokeathlon_Stat_Read is
         new Swagger.Servers.Operation
            (Handler => Pokeathlon_Stat_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokeathlon-stat/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokedex_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokedex_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokedex_List;

      package API_Pokedex_List is
         new Swagger.Servers.Operation
            (Handler => Pokedex_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokedex/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokedex_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokedex_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokedex_Read;

      package API_Pokedex_Read is
         new Swagger.Servers.Operation
            (Handler => Pokedex_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokedex/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokemon_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_List;

      package API_Pokemon_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokemon_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Read;

      package API_Pokemon_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Color_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokemon_Color_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Color_List;

      package API_Pokemon_Color_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Color_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-color/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Color_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokemon_Color_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Color_Read;

      package API_Pokemon_Color_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Color_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-color/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Form_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokemon_Form_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Form_List;

      package API_Pokemon_Form_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Form_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-form/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Form_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokemon_Form_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Form_Read;

      package API_Pokemon_Form_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Form_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-form/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Habitat_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokemon_Habitat_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Habitat_List;

      package API_Pokemon_Habitat_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Habitat_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-habitat/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Habitat_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokemon_Habitat_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Habitat_Read;

      package API_Pokemon_Habitat_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Habitat_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-habitat/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Shape_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokemon_Shape_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Shape_List;

      package API_Pokemon_Shape_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Shape_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-shape/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Shape_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokemon_Shape_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Shape_Read;

      package API_Pokemon_Shape_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Shape_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-shape/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Species_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Pokemon_Species_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Species_List;

      package API_Pokemon_Species_List is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Species_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-species/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Pokemon_Species_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pokemon_Species_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Pokemon_Species_Read;

      package API_Pokemon_Species_Read is
         new Swagger.Servers.Operation
            (Handler => Pokemon_Species_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/pokemon-species/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Region_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Region_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Region_List;

      package API_Region_List is
         new Swagger.Servers.Operation
            (Handler => Region_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/region/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Region_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Region_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Region_Read;

      package API_Region_Read is
         new Swagger.Servers.Operation
            (Handler => Region_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/region/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Stat_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Stat_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Stat_List;

      package API_Stat_List is
         new Swagger.Servers.Operation
            (Handler => Stat_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/stat/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Stat_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Stat_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Stat_Read;

      package API_Stat_Read is
         new Swagger.Servers.Operation
            (Handler => Stat_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/stat/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Super_Contest_Effect_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Super_Contest_Effect_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Super_Contest_Effect_List;

      package API_Super_Contest_Effect_List is
         new Swagger.Servers.Operation
            (Handler => Super_Contest_Effect_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/super-contest-effect/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Super_Contest_Effect_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Super_Contest_Effect_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Super_Contest_Effect_Read;

      package API_Super_Contest_Effect_Read is
         new Swagger.Servers.Operation
            (Handler => Super_Contest_Effect_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/super-contest-effect/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Type_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Type_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Type_List;

      package API_Type_List is
         new Swagger.Servers.Operation
            (Handler => Type_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/type/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Type_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Type_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Type_Read;

      package API_Type_Read is
         new Swagger.Servers.Operation
            (Handler => Type_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/type/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Version_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Version_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_List;

      package API_Version_List is
         new Swagger.Servers.Operation
            (Handler => Version_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Version_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Version_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_Read;

      package API_Version_Read is
         new Swagger.Servers.Operation
            (Handler => Version_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version/{id}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Version_Group_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Limit : Swagger.Nullable_Integer;
         Offset : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));
         Offset := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "offset"));

         
         Server.Version_Group_List
            (Limit,
             Offset, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_Group_List;

      package API_Version_Group_List is
         new Swagger.Servers.Operation
            (Handler => Version_Group_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version-group/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Version_Group_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer;
         Result : Swagger.UString;
      begin

         
         Id := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Version_Group_Read
            (Id, Result, Context);
         if Context.Get_Status = 0 then
            Context.Set_Description ("Default response");
            Stream.Write (Swagger.To_String (Result));


            return;
         end if;

      end Version_Group_Read;

      package API_Version_Group_Read is
         new Swagger.Servers.Operation
            (Handler => Version_Group_Read,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/v2/version-group/{id}/",
             Mimes   => Media_List_1'Access);


      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Ability_List.Definition);
         Swagger.Servers.Register (Server, API_Ability_Read.Definition);
         Swagger.Servers.Register (Server, API_Berry_List.Definition);
         Swagger.Servers.Register (Server, API_Berry_Read.Definition);
         Swagger.Servers.Register (Server, API_Berry_Firmness_List.Definition);
         Swagger.Servers.Register (Server, API_Berry_Firmness_Read.Definition);
         Swagger.Servers.Register (Server, API_Berry_Flavor_List.Definition);
         Swagger.Servers.Register (Server, API_Berry_Flavor_Read.Definition);
         Swagger.Servers.Register (Server, API_Characteristic_List.Definition);
         Swagger.Servers.Register (Server, API_Characteristic_Read.Definition);
         Swagger.Servers.Register (Server, API_Contest_Effect_List.Definition);
         Swagger.Servers.Register (Server, API_Contest_Effect_Read.Definition);
         Swagger.Servers.Register (Server, API_Contest_Type_List.Definition);
         Swagger.Servers.Register (Server, API_Contest_Type_Read.Definition);
         Swagger.Servers.Register (Server, API_Egg_Group_List.Definition);
         Swagger.Servers.Register (Server, API_Egg_Group_Read.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_List.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_Read.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_Value_List.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Condition_Value_Read.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Method_List.Definition);
         Swagger.Servers.Register (Server, API_Encounter_Method_Read.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Chain_List.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Chain_Read.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Trigger_List.Definition);
         Swagger.Servers.Register (Server, API_Evolution_Trigger_Read.Definition);
         Swagger.Servers.Register (Server, API_Gender_List.Definition);
         Swagger.Servers.Register (Server, API_Gender_Read.Definition);
         Swagger.Servers.Register (Server, API_Generation_List.Definition);
         Swagger.Servers.Register (Server, API_Generation_Read.Definition);
         Swagger.Servers.Register (Server, API_Growth_Rate_List.Definition);
         Swagger.Servers.Register (Server, API_Growth_Rate_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Attribute_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Attribute_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Category_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Category_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Fling_Effect_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Fling_Effect_Read.Definition);
         Swagger.Servers.Register (Server, API_Item_Pocket_List.Definition);
         Swagger.Servers.Register (Server, API_Item_Pocket_Read.Definition);
         Swagger.Servers.Register (Server, API_Language_List.Definition);
         Swagger.Servers.Register (Server, API_Language_Read.Definition);
         Swagger.Servers.Register (Server, API_Location_List.Definition);
         Swagger.Servers.Register (Server, API_Location_Read.Definition);
         Swagger.Servers.Register (Server, API_Location_Area_List.Definition);
         Swagger.Servers.Register (Server, API_Location_Area_Read.Definition);
         Swagger.Servers.Register (Server, API_Machine_List.Definition);
         Swagger.Servers.Register (Server, API_Machine_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Ailment_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Ailment_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Battle_Style_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Battle_Style_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Category_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Category_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Damage_Class_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Damage_Class_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Learn_Method_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Learn_Method_Read.Definition);
         Swagger.Servers.Register (Server, API_Move_Target_List.Definition);
         Swagger.Servers.Register (Server, API_Move_Target_Read.Definition);
         Swagger.Servers.Register (Server, API_Nature_List.Definition);
         Swagger.Servers.Register (Server, API_Nature_Read.Definition);
         Swagger.Servers.Register (Server, API_Pal_Park_Area_List.Definition);
         Swagger.Servers.Register (Server, API_Pal_Park_Area_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokeathlon_Stat_List.Definition);
         Swagger.Servers.Register (Server, API_Pokeathlon_Stat_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokedex_List.Definition);
         Swagger.Servers.Register (Server, API_Pokedex_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Color_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Color_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Form_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Form_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Habitat_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Habitat_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Shape_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Shape_Read.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Species_List.Definition);
         Swagger.Servers.Register (Server, API_Pokemon_Species_Read.Definition);
         Swagger.Servers.Register (Server, API_Region_List.Definition);
         Swagger.Servers.Register (Server, API_Region_Read.Definition);
         Swagger.Servers.Register (Server, API_Stat_List.Definition);
         Swagger.Servers.Register (Server, API_Stat_Read.Definition);
         Swagger.Servers.Register (Server, API_Super_Contest_Effect_List.Definition);
         Swagger.Servers.Register (Server, API_Super_Contest_Effect_Read.Definition);
         Swagger.Servers.Register (Server, API_Type_List.Definition);
         Swagger.Servers.Register (Server, API_Type_Read.Definition);
         Swagger.Servers.Register (Server, API_Version_List.Definition);
         Swagger.Servers.Register (Server, API_Version_Read.Definition);
         Swagger.Servers.Register (Server, API_Version_Group_List.Definition);
         Swagger.Servers.Register (Server, API_Version_Group_Read.Definition);
      end Register;

      protected body Server is
         --  
         procedure Ability_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ability_List
               (Limit,
                Offset,
                Result,
                Context);
         end Ability_List;

         --  
         procedure Ability_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ability_Read
               (Id,
                Result,
                Context);
         end Ability_Read;

         --  
         procedure Berry_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Berry_List
               (Limit,
                Offset,
                Result,
                Context);
         end Berry_List;

         --  
         procedure Berry_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Berry_Read
               (Id,
                Result,
                Context);
         end Berry_Read;

         --  
         procedure Berry_Firmness_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Berry_Firmness_List
               (Limit,
                Offset,
                Result,
                Context);
         end Berry_Firmness_List;

         --  
         procedure Berry_Firmness_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Berry_Firmness_Read
               (Id,
                Result,
                Context);
         end Berry_Firmness_Read;

         --  
         procedure Berry_Flavor_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Berry_Flavor_List
               (Limit,
                Offset,
                Result,
                Context);
         end Berry_Flavor_List;

         --  
         procedure Berry_Flavor_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Berry_Flavor_Read
               (Id,
                Result,
                Context);
         end Berry_Flavor_Read;

         --  
         procedure Characteristic_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Characteristic_List
               (Limit,
                Offset,
                Result,
                Context);
         end Characteristic_List;

         --  
         procedure Characteristic_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Characteristic_Read
               (Id,
                Result,
                Context);
         end Characteristic_Read;

         --  
         procedure Contest_Effect_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Contest_Effect_List
               (Limit,
                Offset,
                Result,
                Context);
         end Contest_Effect_List;

         --  
         procedure Contest_Effect_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Contest_Effect_Read
               (Id,
                Result,
                Context);
         end Contest_Effect_Read;

         --  
         procedure Contest_Type_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Contest_Type_List
               (Limit,
                Offset,
                Result,
                Context);
         end Contest_Type_List;

         --  
         procedure Contest_Type_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Contest_Type_Read
               (Id,
                Result,
                Context);
         end Contest_Type_Read;

         --  
         procedure Egg_Group_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Egg_Group_List
               (Limit,
                Offset,
                Result,
                Context);
         end Egg_Group_List;

         --  
         procedure Egg_Group_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Egg_Group_Read
               (Id,
                Result,
                Context);
         end Egg_Group_Read;

         --  
         procedure Encounter_Condition_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Encounter_Condition_List
               (Limit,
                Offset,
                Result,
                Context);
         end Encounter_Condition_List;

         --  
         procedure Encounter_Condition_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Encounter_Condition_Read
               (Id,
                Result,
                Context);
         end Encounter_Condition_Read;

         --  
         procedure Encounter_Condition_Value_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Encounter_Condition_Value_List
               (Limit,
                Offset,
                Result,
                Context);
         end Encounter_Condition_Value_List;

         --  
         procedure Encounter_Condition_Value_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Encounter_Condition_Value_Read
               (Id,
                Result,
                Context);
         end Encounter_Condition_Value_Read;

         --  
         procedure Encounter_Method_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Encounter_Method_List
               (Limit,
                Offset,
                Result,
                Context);
         end Encounter_Method_List;

         --  
         procedure Encounter_Method_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Encounter_Method_Read
               (Id,
                Result,
                Context);
         end Encounter_Method_Read;

         --  
         procedure Evolution_Chain_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Evolution_Chain_List
               (Limit,
                Offset,
                Result,
                Context);
         end Evolution_Chain_List;

         --  
         procedure Evolution_Chain_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Evolution_Chain_Read
               (Id,
                Result,
                Context);
         end Evolution_Chain_Read;

         --  
         procedure Evolution_Trigger_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Evolution_Trigger_List
               (Limit,
                Offset,
                Result,
                Context);
         end Evolution_Trigger_List;

         --  
         procedure Evolution_Trigger_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Evolution_Trigger_Read
               (Id,
                Result,
                Context);
         end Evolution_Trigger_Read;

         --  
         procedure Gender_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Gender_List
               (Limit,
                Offset,
                Result,
                Context);
         end Gender_List;

         --  
         procedure Gender_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Gender_Read
               (Id,
                Result,
                Context);
         end Gender_Read;

         --  
         procedure Generation_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Generation_List
               (Limit,
                Offset,
                Result,
                Context);
         end Generation_List;

         --  
         procedure Generation_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Generation_Read
               (Id,
                Result,
                Context);
         end Generation_Read;

         --  
         procedure Growth_Rate_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Growth_Rate_List
               (Limit,
                Offset,
                Result,
                Context);
         end Growth_Rate_List;

         --  
         procedure Growth_Rate_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Growth_Rate_Read
               (Id,
                Result,
                Context);
         end Growth_Rate_Read;

         --  
         procedure Item_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_List
               (Limit,
                Offset,
                Result,
                Context);
         end Item_List;

         --  
         procedure Item_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Read
               (Id,
                Result,
                Context);
         end Item_Read;

         --  
         procedure Item_Attribute_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Attribute_List
               (Limit,
                Offset,
                Result,
                Context);
         end Item_Attribute_List;

         --  
         procedure Item_Attribute_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Attribute_Read
               (Id,
                Result,
                Context);
         end Item_Attribute_Read;

         --  
         procedure Item_Category_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Category_List
               (Limit,
                Offset,
                Result,
                Context);
         end Item_Category_List;

         --  
         procedure Item_Category_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Category_Read
               (Id,
                Result,
                Context);
         end Item_Category_Read;

         --  
         procedure Item_Fling_Effect_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Fling_Effect_List
               (Limit,
                Offset,
                Result,
                Context);
         end Item_Fling_Effect_List;

         --  
         procedure Item_Fling_Effect_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Fling_Effect_Read
               (Id,
                Result,
                Context);
         end Item_Fling_Effect_Read;

         --  
         procedure Item_Pocket_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Pocket_List
               (Limit,
                Offset,
                Result,
                Context);
         end Item_Pocket_List;

         --  
         procedure Item_Pocket_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Item_Pocket_Read
               (Id,
                Result,
                Context);
         end Item_Pocket_Read;

         --  
         procedure Language_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Language_List
               (Limit,
                Offset,
                Result,
                Context);
         end Language_List;

         --  
         procedure Language_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Language_Read
               (Id,
                Result,
                Context);
         end Language_Read;

         --  
         procedure Location_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Location_List
               (Limit,
                Offset,
                Result,
                Context);
         end Location_List;

         --  
         procedure Location_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Location_Read
               (Id,
                Result,
                Context);
         end Location_Read;

         --  
         procedure Location_Area_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Location_Area_List
               (Limit,
                Offset,
                Result,
                Context);
         end Location_Area_List;

         --  
         procedure Location_Area_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Location_Area_Read
               (Id,
                Result,
                Context);
         end Location_Area_Read;

         --  
         procedure Machine_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Machine_List
               (Limit,
                Offset,
                Result,
                Context);
         end Machine_List;

         --  
         procedure Machine_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Machine_Read
               (Id,
                Result,
                Context);
         end Machine_Read;

         --  
         procedure Move_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_List;

         --  
         procedure Move_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Read
               (Id,
                Result,
                Context);
         end Move_Read;

         --  
         procedure Move_Ailment_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Ailment_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_Ailment_List;

         --  
         procedure Move_Ailment_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Ailment_Read
               (Id,
                Result,
                Context);
         end Move_Ailment_Read;

         --  
         procedure Move_Battle_Style_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Battle_Style_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_Battle_Style_List;

         --  
         procedure Move_Battle_Style_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Battle_Style_Read
               (Id,
                Result,
                Context);
         end Move_Battle_Style_Read;

         --  
         procedure Move_Category_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Category_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_Category_List;

         --  
         procedure Move_Category_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Category_Read
               (Id,
                Result,
                Context);
         end Move_Category_Read;

         --  
         procedure Move_Damage_Class_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Damage_Class_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_Damage_Class_List;

         --  
         procedure Move_Damage_Class_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Damage_Class_Read
               (Id,
                Result,
                Context);
         end Move_Damage_Class_Read;

         --  
         procedure Move_Learn_Method_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Learn_Method_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_Learn_Method_List;

         --  
         procedure Move_Learn_Method_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Learn_Method_Read
               (Id,
                Result,
                Context);
         end Move_Learn_Method_Read;

         --  
         procedure Move_Target_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Target_List
               (Limit,
                Offset,
                Result,
                Context);
         end Move_Target_List;

         --  
         procedure Move_Target_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Move_Target_Read
               (Id,
                Result,
                Context);
         end Move_Target_Read;

         --  
         procedure Nature_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Nature_List
               (Limit,
                Offset,
                Result,
                Context);
         end Nature_List;

         --  
         procedure Nature_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Nature_Read
               (Id,
                Result,
                Context);
         end Nature_Read;

         --  
         procedure Pal_Park_Area_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pal_Park_Area_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pal_Park_Area_List;

         --  
         procedure Pal_Park_Area_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pal_Park_Area_Read
               (Id,
                Result,
                Context);
         end Pal_Park_Area_Read;

         --  
         procedure Pokeathlon_Stat_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokeathlon_Stat_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokeathlon_Stat_List;

         --  
         procedure Pokeathlon_Stat_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokeathlon_Stat_Read
               (Id,
                Result,
                Context);
         end Pokeathlon_Stat_Read;

         --  
         procedure Pokedex_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokedex_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokedex_List;

         --  
         procedure Pokedex_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokedex_Read
               (Id,
                Result,
                Context);
         end Pokedex_Read;

         --  
         procedure Pokemon_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokemon_List;

         --  
         procedure Pokemon_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Read
               (Id,
                Result,
                Context);
         end Pokemon_Read;

         --  
         procedure Pokemon_Color_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Color_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokemon_Color_List;

         --  
         procedure Pokemon_Color_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Color_Read
               (Id,
                Result,
                Context);
         end Pokemon_Color_Read;

         --  
         procedure Pokemon_Form_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Form_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokemon_Form_List;

         --  
         procedure Pokemon_Form_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Form_Read
               (Id,
                Result,
                Context);
         end Pokemon_Form_Read;

         --  
         procedure Pokemon_Habitat_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Habitat_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokemon_Habitat_List;

         --  
         procedure Pokemon_Habitat_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Habitat_Read
               (Id,
                Result,
                Context);
         end Pokemon_Habitat_Read;

         --  
         procedure Pokemon_Shape_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Shape_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokemon_Shape_List;

         --  
         procedure Pokemon_Shape_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Shape_Read
               (Id,
                Result,
                Context);
         end Pokemon_Shape_Read;

         --  
         procedure Pokemon_Species_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Species_List
               (Limit,
                Offset,
                Result,
                Context);
         end Pokemon_Species_List;

         --  
         procedure Pokemon_Species_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pokemon_Species_Read
               (Id,
                Result,
                Context);
         end Pokemon_Species_Read;

         --  
         procedure Region_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Region_List
               (Limit,
                Offset,
                Result,
                Context);
         end Region_List;

         --  
         procedure Region_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Region_Read
               (Id,
                Result,
                Context);
         end Region_Read;

         --  
         procedure Stat_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Stat_List
               (Limit,
                Offset,
                Result,
                Context);
         end Stat_List;

         --  
         procedure Stat_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Stat_Read
               (Id,
                Result,
                Context);
         end Stat_Read;

         --  
         procedure Super_Contest_Effect_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Super_Contest_Effect_List
               (Limit,
                Offset,
                Result,
                Context);
         end Super_Contest_Effect_List;

         --  
         procedure Super_Contest_Effect_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Super_Contest_Effect_Read
               (Id,
                Result,
                Context);
         end Super_Contest_Effect_Read;

         --  
         procedure Type_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Type_List
               (Limit,
                Offset,
                Result,
                Context);
         end Type_List;

         --  
         procedure Type_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Type_Read
               (Id,
                Result,
                Context);
         end Type_Read;

         --  
         procedure Version_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Version_List
               (Limit,
                Offset,
                Result,
                Context);
         end Version_List;

         --  
         procedure Version_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Version_Read
               (Id,
                Result,
                Context);
         end Version_Read;

         --  
         procedure Version_Group_List
            (Limit : in Swagger.Nullable_Integer;
             Offset : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Version_Group_List
               (Limit,
                Offset,
                Result,
                Context);
         end Version_Group_List;

         --  
         procedure Version_Group_Read
            (Id : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Version_Group_Read
               (Id,
                Result,
                Context);
         end Version_Group_Read;

      end Server;

   end Shared_Instance;

end .Skeletons;
