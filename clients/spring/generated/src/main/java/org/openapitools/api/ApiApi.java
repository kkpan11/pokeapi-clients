/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-03T13:23:38.213795787Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "ability", description = "the ability API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v2/ability/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "abilityList",
        tags = { "ability" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/ability/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> abilityList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/ability/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "abilityRead",
        tags = { "ability" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/ability/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> abilityRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/berry-firmness/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "berryFirmnessList",
        tags = { "berry-firmness" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/berry-firmness/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> berryFirmnessList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/berry-firmness/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "berryFirmnessRead",
        tags = { "berry-firmness" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/berry-firmness/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> berryFirmnessRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/berry-flavor/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "berryFlavorList",
        tags = { "berry-flavor" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/berry-flavor/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> berryFlavorList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/berry-flavor/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "berryFlavorRead",
        tags = { "berry-flavor" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/berry-flavor/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> berryFlavorRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/berry/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "berryList",
        tags = { "berry" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/berry/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> berryList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/berry/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "berryRead",
        tags = { "berry" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/berry/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> berryRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/characteristic/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "characteristicList",
        tags = { "characteristic" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/characteristic/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> characteristicList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/characteristic/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "characteristicRead",
        tags = { "characteristic" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/characteristic/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> characteristicRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/contest-effect/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "contestEffectList",
        tags = { "contest-effect" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/contest-effect/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> contestEffectList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/contest-effect/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "contestEffectRead",
        tags = { "contest-effect" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/contest-effect/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> contestEffectRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/contest-type/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "contestTypeList",
        tags = { "contest-type" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/contest-type/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> contestTypeList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/contest-type/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "contestTypeRead",
        tags = { "contest-type" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/contest-type/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> contestTypeRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/egg-group/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "eggGroupList",
        tags = { "egg-group" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/egg-group/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> eggGroupList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/egg-group/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "eggGroupRead",
        tags = { "egg-group" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/egg-group/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> eggGroupRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/encounter-condition/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "encounterConditionList",
        tags = { "encounter-condition" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/encounter-condition/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> encounterConditionList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/encounter-condition/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "encounterConditionRead",
        tags = { "encounter-condition" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/encounter-condition/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> encounterConditionRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/encounter-condition-value/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "encounterConditionValueList",
        tags = { "encounter-condition-value" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/encounter-condition-value/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> encounterConditionValueList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/encounter-condition-value/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "encounterConditionValueRead",
        tags = { "encounter-condition-value" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/encounter-condition-value/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> encounterConditionValueRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/encounter-method/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "encounterMethodList",
        tags = { "encounter-method" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/encounter-method/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> encounterMethodList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/encounter-method/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "encounterMethodRead",
        tags = { "encounter-method" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/encounter-method/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> encounterMethodRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/evolution-chain/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "evolutionChainList",
        tags = { "evolution-chain" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/evolution-chain/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> evolutionChainList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/evolution-chain/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "evolutionChainRead",
        tags = { "evolution-chain" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/evolution-chain/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> evolutionChainRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/evolution-trigger/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "evolutionTriggerList",
        tags = { "evolution-trigger" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/evolution-trigger/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> evolutionTriggerList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/evolution-trigger/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "evolutionTriggerRead",
        tags = { "evolution-trigger" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/evolution-trigger/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> evolutionTriggerRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/gender/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "genderList",
        tags = { "gender" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/gender/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> genderList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/gender/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "genderRead",
        tags = { "gender" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/gender/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> genderRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/generation/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "generationList",
        tags = { "generation" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/generation/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> generationList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/generation/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "generationRead",
        tags = { "generation" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/generation/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> generationRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/growth-rate/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "growthRateList",
        tags = { "growth-rate" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/growth-rate/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> growthRateList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/growth-rate/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "growthRateRead",
        tags = { "growth-rate" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/growth-rate/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> growthRateRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-attribute/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemAttributeList",
        tags = { "item-attribute" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-attribute/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemAttributeList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-attribute/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemAttributeRead",
        tags = { "item-attribute" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-attribute/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemAttributeRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-category/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemCategoryList",
        tags = { "item-category" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-category/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemCategoryList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-category/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemCategoryRead",
        tags = { "item-category" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-category/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemCategoryRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-fling-effect/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemFlingEffectList",
        tags = { "item-fling-effect" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-fling-effect/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemFlingEffectList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-fling-effect/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemFlingEffectRead",
        tags = { "item-fling-effect" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-fling-effect/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemFlingEffectRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemList",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-pocket/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemPocketList",
        tags = { "item-pocket" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-pocket/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemPocketList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item-pocket/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemPocketRead",
        tags = { "item-pocket" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item-pocket/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemPocketRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/item/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "itemRead",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/item/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> itemRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/language/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "languageList",
        tags = { "language" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/language/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> languageList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/language/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "languageRead",
        tags = { "language" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/language/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> languageRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/location-area/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "locationAreaList",
        tags = { "location-area" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/location-area/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> locationAreaList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/location-area/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "locationAreaRead",
        tags = { "location-area" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/location-area/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> locationAreaRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/location/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "locationList",
        tags = { "location" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/location/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> locationList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/location/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "locationRead",
        tags = { "location" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/location/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> locationRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/machine/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "machineList",
        tags = { "machine" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/machine/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> machineList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/machine/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "machineRead",
        tags = { "machine" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/machine/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> machineRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-ailment/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveAilmentList",
        tags = { "move-ailment" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-ailment/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveAilmentList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-ailment/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveAilmentRead",
        tags = { "move-ailment" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-ailment/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveAilmentRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-battle-style/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveBattleStyleList",
        tags = { "move-battle-style" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-battle-style/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveBattleStyleList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-battle-style/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveBattleStyleRead",
        tags = { "move-battle-style" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-battle-style/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveBattleStyleRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-category/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveCategoryList",
        tags = { "move-category" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-category/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveCategoryList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-category/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveCategoryRead",
        tags = { "move-category" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-category/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveCategoryRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-damage-class/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveDamageClassList",
        tags = { "move-damage-class" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-damage-class/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveDamageClassList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-damage-class/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveDamageClassRead",
        tags = { "move-damage-class" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-damage-class/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveDamageClassRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-learn-method/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveLearnMethodList",
        tags = { "move-learn-method" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-learn-method/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveLearnMethodList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-learn-method/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveLearnMethodRead",
        tags = { "move-learn-method" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-learn-method/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveLearnMethodRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveList",
        tags = { "move" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveRead",
        tags = { "move" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-target/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveTargetList",
        tags = { "move-target" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-target/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveTargetList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/move-target/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "moveTargetRead",
        tags = { "move-target" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/move-target/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> moveTargetRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/nature/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "natureList",
        tags = { "nature" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/nature/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> natureList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/nature/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "natureRead",
        tags = { "nature" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/nature/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> natureRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pal-park-area/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "palParkAreaList",
        tags = { "pal-park-area" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pal-park-area/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> palParkAreaList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pal-park-area/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "palParkAreaRead",
        tags = { "pal-park-area" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pal-park-area/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> palParkAreaRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokeathlon-stat/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokeathlonStatList",
        tags = { "pokeathlon-stat" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokeathlon-stat/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokeathlonStatList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokeathlon-stat/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokeathlonStatRead",
        tags = { "pokeathlon-stat" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokeathlon-stat/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokeathlonStatRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokedex/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokedexList",
        tags = { "pokedex" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokedex/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokedexList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokedex/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokedexRead",
        tags = { "pokedex" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokedex/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokedexRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-color/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonColorList",
        tags = { "pokemon-color" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-color/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonColorList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-color/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonColorRead",
        tags = { "pokemon-color" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-color/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonColorRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-form/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonFormList",
        tags = { "pokemon-form" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-form/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonFormList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-form/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonFormRead",
        tags = { "pokemon-form" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-form/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonFormRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-habitat/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonHabitatList",
        tags = { "pokemon-habitat" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-habitat/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonHabitatList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-habitat/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonHabitatRead",
        tags = { "pokemon-habitat" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-habitat/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonHabitatRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonList",
        tags = { "pokemon" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonRead",
        tags = { "pokemon" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-shape/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonShapeList",
        tags = { "pokemon-shape" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-shape/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonShapeList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-shape/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonShapeRead",
        tags = { "pokemon-shape" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-shape/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonShapeRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-species/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonSpeciesList",
        tags = { "pokemon-species" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-species/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonSpeciesList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/pokemon-species/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "pokemonSpeciesRead",
        tags = { "pokemon-species" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/pokemon-species/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> pokemonSpeciesRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/region/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "regionList",
        tags = { "region" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/region/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> regionList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/region/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "regionRead",
        tags = { "region" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/region/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> regionRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/stat/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "statList",
        tags = { "stat" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/stat/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> statList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/stat/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "statRead",
        tags = { "stat" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/stat/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> statRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/super-contest-effect/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "superContestEffectList",
        tags = { "super-contest-effect" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/super-contest-effect/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> superContestEffectList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/super-contest-effect/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "superContestEffectRead",
        tags = { "super-contest-effect" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/super-contest-effect/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> superContestEffectRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/type/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "typeList",
        tags = { "type" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/type/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> typeList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/type/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "typeRead",
        tags = { "type" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/type/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> typeRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/version-group/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "versionGroupList",
        tags = { "version-group" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/version-group/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> versionGroupList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/version-group/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "versionGroupRead",
        tags = { "version-group" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/version-group/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> versionGroupRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/version/
     *
     * @param limit  (optional)
     * @param offset  (optional)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "versionList",
        tags = { "version" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/version/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> versionList(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/version/{id}/
     *
     * @param id  (required)
     * @return Default response (status code 200)
     */
    @Operation(
        operationId = "versionRead",
        tags = { "version" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Default response", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/version/{id}/",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> versionRead(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
