/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAIApiRouter.h"
#include "OAIAbilityApiRequest.h"
#include "OAIBerryApiRequest.h"
#include "OAIBerryFirmnessApiRequest.h"
#include "OAIBerryFlavorApiRequest.h"
#include "OAICharacteristicApiRequest.h"
#include "OAIContestEffectApiRequest.h"
#include "OAIContestTypeApiRequest.h"
#include "OAIEggGroupApiRequest.h"
#include "OAIEncounterConditionApiRequest.h"
#include "OAIEncounterConditionValueApiRequest.h"
#include "OAIEncounterMethodApiRequest.h"
#include "OAIEvolutionChainApiRequest.h"
#include "OAIEvolutionTriggerApiRequest.h"
#include "OAIGenderApiRequest.h"
#include "OAIGenerationApiRequest.h"
#include "OAIGrowthRateApiRequest.h"
#include "OAIItemApiRequest.h"
#include "OAIItemAttributeApiRequest.h"
#include "OAIItemCategoryApiRequest.h"
#include "OAIItemFlingEffectApiRequest.h"
#include "OAIItemPocketApiRequest.h"
#include "OAILanguageApiRequest.h"
#include "OAILocationApiRequest.h"
#include "OAILocationAreaApiRequest.h"
#include "OAIMachineApiRequest.h"
#include "OAIMoveApiRequest.h"
#include "OAIMoveAilmentApiRequest.h"
#include "OAIMoveBattleStyleApiRequest.h"
#include "OAIMoveCategoryApiRequest.h"
#include "OAIMoveDamageClassApiRequest.h"
#include "OAIMoveLearnMethodApiRequest.h"
#include "OAIMoveTargetApiRequest.h"
#include "OAINatureApiRequest.h"
#include "OAIPalParkAreaApiRequest.h"
#include "OAIPokeathlonStatApiRequest.h"
#include "OAIPokedexApiRequest.h"
#include "OAIPokemonApiRequest.h"
#include "OAIPokemonColorApiRequest.h"
#include "OAIPokemonFormApiRequest.h"
#include "OAIPokemonHabitatApiRequest.h"
#include "OAIPokemonShapeApiRequest.h"
#include "OAIPokemonSpeciesApiRequest.h"
#include "OAIRegionApiRequest.h"
#include "OAIStatApiRequest.h"
#include "OAISuperContestEffectApiRequest.h"
#include "OAITypeApiRequest.h"
#include "OAIVersionApiRequest.h"
#include "OAIVersionGroupApiRequest.h"


namespace OpenAPI {

OAIApiRouter::OAIApiRouter() {
    createApiHandlers();
}

OAIApiRouter::~OAIApiRouter(){

}

void OAIApiRouter::createApiHandlers() {
    mOAIAbilityApiHandler = QSharedPointer<OAIAbilityApiHandler>::create();
    mOAIBerryApiHandler = QSharedPointer<OAIBerryApiHandler>::create();
    mOAIBerryFirmnessApiHandler = QSharedPointer<OAIBerryFirmnessApiHandler>::create();
    mOAIBerryFlavorApiHandler = QSharedPointer<OAIBerryFlavorApiHandler>::create();
    mOAICharacteristicApiHandler = QSharedPointer<OAICharacteristicApiHandler>::create();
    mOAIContestEffectApiHandler = QSharedPointer<OAIContestEffectApiHandler>::create();
    mOAIContestTypeApiHandler = QSharedPointer<OAIContestTypeApiHandler>::create();
    mOAIEggGroupApiHandler = QSharedPointer<OAIEggGroupApiHandler>::create();
    mOAIEncounterConditionApiHandler = QSharedPointer<OAIEncounterConditionApiHandler>::create();
    mOAIEncounterConditionValueApiHandler = QSharedPointer<OAIEncounterConditionValueApiHandler>::create();
    mOAIEncounterMethodApiHandler = QSharedPointer<OAIEncounterMethodApiHandler>::create();
    mOAIEvolutionChainApiHandler = QSharedPointer<OAIEvolutionChainApiHandler>::create();
    mOAIEvolutionTriggerApiHandler = QSharedPointer<OAIEvolutionTriggerApiHandler>::create();
    mOAIGenderApiHandler = QSharedPointer<OAIGenderApiHandler>::create();
    mOAIGenerationApiHandler = QSharedPointer<OAIGenerationApiHandler>::create();
    mOAIGrowthRateApiHandler = QSharedPointer<OAIGrowthRateApiHandler>::create();
    mOAIItemApiHandler = QSharedPointer<OAIItemApiHandler>::create();
    mOAIItemAttributeApiHandler = QSharedPointer<OAIItemAttributeApiHandler>::create();
    mOAIItemCategoryApiHandler = QSharedPointer<OAIItemCategoryApiHandler>::create();
    mOAIItemFlingEffectApiHandler = QSharedPointer<OAIItemFlingEffectApiHandler>::create();
    mOAIItemPocketApiHandler = QSharedPointer<OAIItemPocketApiHandler>::create();
    mOAILanguageApiHandler = QSharedPointer<OAILanguageApiHandler>::create();
    mOAILocationApiHandler = QSharedPointer<OAILocationApiHandler>::create();
    mOAILocationAreaApiHandler = QSharedPointer<OAILocationAreaApiHandler>::create();
    mOAIMachineApiHandler = QSharedPointer<OAIMachineApiHandler>::create();
    mOAIMoveApiHandler = QSharedPointer<OAIMoveApiHandler>::create();
    mOAIMoveAilmentApiHandler = QSharedPointer<OAIMoveAilmentApiHandler>::create();
    mOAIMoveBattleStyleApiHandler = QSharedPointer<OAIMoveBattleStyleApiHandler>::create();
    mOAIMoveCategoryApiHandler = QSharedPointer<OAIMoveCategoryApiHandler>::create();
    mOAIMoveDamageClassApiHandler = QSharedPointer<OAIMoveDamageClassApiHandler>::create();
    mOAIMoveLearnMethodApiHandler = QSharedPointer<OAIMoveLearnMethodApiHandler>::create();
    mOAIMoveTargetApiHandler = QSharedPointer<OAIMoveTargetApiHandler>::create();
    mOAINatureApiHandler = QSharedPointer<OAINatureApiHandler>::create();
    mOAIPalParkAreaApiHandler = QSharedPointer<OAIPalParkAreaApiHandler>::create();
    mOAIPokeathlonStatApiHandler = QSharedPointer<OAIPokeathlonStatApiHandler>::create();
    mOAIPokedexApiHandler = QSharedPointer<OAIPokedexApiHandler>::create();
    mOAIPokemonApiHandler = QSharedPointer<OAIPokemonApiHandler>::create();
    mOAIPokemonColorApiHandler = QSharedPointer<OAIPokemonColorApiHandler>::create();
    mOAIPokemonFormApiHandler = QSharedPointer<OAIPokemonFormApiHandler>::create();
    mOAIPokemonHabitatApiHandler = QSharedPointer<OAIPokemonHabitatApiHandler>::create();
    mOAIPokemonShapeApiHandler = QSharedPointer<OAIPokemonShapeApiHandler>::create();
    mOAIPokemonSpeciesApiHandler = QSharedPointer<OAIPokemonSpeciesApiHandler>::create();
    mOAIRegionApiHandler = QSharedPointer<OAIRegionApiHandler>::create();
    mOAIStatApiHandler = QSharedPointer<OAIStatApiHandler>::create();
    mOAISuperContestEffectApiHandler = QSharedPointer<OAISuperContestEffectApiHandler>::create();
    mOAITypeApiHandler = QSharedPointer<OAITypeApiHandler>::create();
    mOAIVersionApiHandler = QSharedPointer<OAIVersionApiHandler>::create();
    mOAIVersionGroupApiHandler = QSharedPointer<OAIVersionGroupApiHandler>::create();
}


void OAIApiRouter::setOAIAbilityApiHandler(QSharedPointer<OAIAbilityApiHandler> handler){
    mOAIAbilityApiHandler = handler;
}
void OAIApiRouter::setOAIBerryApiHandler(QSharedPointer<OAIBerryApiHandler> handler){
    mOAIBerryApiHandler = handler;
}
void OAIApiRouter::setOAIBerryFirmnessApiHandler(QSharedPointer<OAIBerryFirmnessApiHandler> handler){
    mOAIBerryFirmnessApiHandler = handler;
}
void OAIApiRouter::setOAIBerryFlavorApiHandler(QSharedPointer<OAIBerryFlavorApiHandler> handler){
    mOAIBerryFlavorApiHandler = handler;
}
void OAIApiRouter::setOAICharacteristicApiHandler(QSharedPointer<OAICharacteristicApiHandler> handler){
    mOAICharacteristicApiHandler = handler;
}
void OAIApiRouter::setOAIContestEffectApiHandler(QSharedPointer<OAIContestEffectApiHandler> handler){
    mOAIContestEffectApiHandler = handler;
}
void OAIApiRouter::setOAIContestTypeApiHandler(QSharedPointer<OAIContestTypeApiHandler> handler){
    mOAIContestTypeApiHandler = handler;
}
void OAIApiRouter::setOAIEggGroupApiHandler(QSharedPointer<OAIEggGroupApiHandler> handler){
    mOAIEggGroupApiHandler = handler;
}
void OAIApiRouter::setOAIEncounterConditionApiHandler(QSharedPointer<OAIEncounterConditionApiHandler> handler){
    mOAIEncounterConditionApiHandler = handler;
}
void OAIApiRouter::setOAIEncounterConditionValueApiHandler(QSharedPointer<OAIEncounterConditionValueApiHandler> handler){
    mOAIEncounterConditionValueApiHandler = handler;
}
void OAIApiRouter::setOAIEncounterMethodApiHandler(QSharedPointer<OAIEncounterMethodApiHandler> handler){
    mOAIEncounterMethodApiHandler = handler;
}
void OAIApiRouter::setOAIEvolutionChainApiHandler(QSharedPointer<OAIEvolutionChainApiHandler> handler){
    mOAIEvolutionChainApiHandler = handler;
}
void OAIApiRouter::setOAIEvolutionTriggerApiHandler(QSharedPointer<OAIEvolutionTriggerApiHandler> handler){
    mOAIEvolutionTriggerApiHandler = handler;
}
void OAIApiRouter::setOAIGenderApiHandler(QSharedPointer<OAIGenderApiHandler> handler){
    mOAIGenderApiHandler = handler;
}
void OAIApiRouter::setOAIGenerationApiHandler(QSharedPointer<OAIGenerationApiHandler> handler){
    mOAIGenerationApiHandler = handler;
}
void OAIApiRouter::setOAIGrowthRateApiHandler(QSharedPointer<OAIGrowthRateApiHandler> handler){
    mOAIGrowthRateApiHandler = handler;
}
void OAIApiRouter::setOAIItemApiHandler(QSharedPointer<OAIItemApiHandler> handler){
    mOAIItemApiHandler = handler;
}
void OAIApiRouter::setOAIItemAttributeApiHandler(QSharedPointer<OAIItemAttributeApiHandler> handler){
    mOAIItemAttributeApiHandler = handler;
}
void OAIApiRouter::setOAIItemCategoryApiHandler(QSharedPointer<OAIItemCategoryApiHandler> handler){
    mOAIItemCategoryApiHandler = handler;
}
void OAIApiRouter::setOAIItemFlingEffectApiHandler(QSharedPointer<OAIItemFlingEffectApiHandler> handler){
    mOAIItemFlingEffectApiHandler = handler;
}
void OAIApiRouter::setOAIItemPocketApiHandler(QSharedPointer<OAIItemPocketApiHandler> handler){
    mOAIItemPocketApiHandler = handler;
}
void OAIApiRouter::setOAILanguageApiHandler(QSharedPointer<OAILanguageApiHandler> handler){
    mOAILanguageApiHandler = handler;
}
void OAIApiRouter::setOAILocationApiHandler(QSharedPointer<OAILocationApiHandler> handler){
    mOAILocationApiHandler = handler;
}
void OAIApiRouter::setOAILocationAreaApiHandler(QSharedPointer<OAILocationAreaApiHandler> handler){
    mOAILocationAreaApiHandler = handler;
}
void OAIApiRouter::setOAIMachineApiHandler(QSharedPointer<OAIMachineApiHandler> handler){
    mOAIMachineApiHandler = handler;
}
void OAIApiRouter::setOAIMoveApiHandler(QSharedPointer<OAIMoveApiHandler> handler){
    mOAIMoveApiHandler = handler;
}
void OAIApiRouter::setOAIMoveAilmentApiHandler(QSharedPointer<OAIMoveAilmentApiHandler> handler){
    mOAIMoveAilmentApiHandler = handler;
}
void OAIApiRouter::setOAIMoveBattleStyleApiHandler(QSharedPointer<OAIMoveBattleStyleApiHandler> handler){
    mOAIMoveBattleStyleApiHandler = handler;
}
void OAIApiRouter::setOAIMoveCategoryApiHandler(QSharedPointer<OAIMoveCategoryApiHandler> handler){
    mOAIMoveCategoryApiHandler = handler;
}
void OAIApiRouter::setOAIMoveDamageClassApiHandler(QSharedPointer<OAIMoveDamageClassApiHandler> handler){
    mOAIMoveDamageClassApiHandler = handler;
}
void OAIApiRouter::setOAIMoveLearnMethodApiHandler(QSharedPointer<OAIMoveLearnMethodApiHandler> handler){
    mOAIMoveLearnMethodApiHandler = handler;
}
void OAIApiRouter::setOAIMoveTargetApiHandler(QSharedPointer<OAIMoveTargetApiHandler> handler){
    mOAIMoveTargetApiHandler = handler;
}
void OAIApiRouter::setOAINatureApiHandler(QSharedPointer<OAINatureApiHandler> handler){
    mOAINatureApiHandler = handler;
}
void OAIApiRouter::setOAIPalParkAreaApiHandler(QSharedPointer<OAIPalParkAreaApiHandler> handler){
    mOAIPalParkAreaApiHandler = handler;
}
void OAIApiRouter::setOAIPokeathlonStatApiHandler(QSharedPointer<OAIPokeathlonStatApiHandler> handler){
    mOAIPokeathlonStatApiHandler = handler;
}
void OAIApiRouter::setOAIPokedexApiHandler(QSharedPointer<OAIPokedexApiHandler> handler){
    mOAIPokedexApiHandler = handler;
}
void OAIApiRouter::setOAIPokemonApiHandler(QSharedPointer<OAIPokemonApiHandler> handler){
    mOAIPokemonApiHandler = handler;
}
void OAIApiRouter::setOAIPokemonColorApiHandler(QSharedPointer<OAIPokemonColorApiHandler> handler){
    mOAIPokemonColorApiHandler = handler;
}
void OAIApiRouter::setOAIPokemonFormApiHandler(QSharedPointer<OAIPokemonFormApiHandler> handler){
    mOAIPokemonFormApiHandler = handler;
}
void OAIApiRouter::setOAIPokemonHabitatApiHandler(QSharedPointer<OAIPokemonHabitatApiHandler> handler){
    mOAIPokemonHabitatApiHandler = handler;
}
void OAIApiRouter::setOAIPokemonShapeApiHandler(QSharedPointer<OAIPokemonShapeApiHandler> handler){
    mOAIPokemonShapeApiHandler = handler;
}
void OAIApiRouter::setOAIPokemonSpeciesApiHandler(QSharedPointer<OAIPokemonSpeciesApiHandler> handler){
    mOAIPokemonSpeciesApiHandler = handler;
}
void OAIApiRouter::setOAIRegionApiHandler(QSharedPointer<OAIRegionApiHandler> handler){
    mOAIRegionApiHandler = handler;
}
void OAIApiRouter::setOAIStatApiHandler(QSharedPointer<OAIStatApiHandler> handler){
    mOAIStatApiHandler = handler;
}
void OAIApiRouter::setOAISuperContestEffectApiHandler(QSharedPointer<OAISuperContestEffectApiHandler> handler){
    mOAISuperContestEffectApiHandler = handler;
}
void OAIApiRouter::setOAITypeApiHandler(QSharedPointer<OAITypeApiHandler> handler){
    mOAITypeApiHandler = handler;
}
void OAIApiRouter::setOAIVersionApiHandler(QSharedPointer<OAIVersionApiHandler> handler){
    mOAIVersionApiHandler = handler;
}
void OAIApiRouter::setOAIVersionGroupApiHandler(QSharedPointer<OAIVersionGroupApiHandler> handler){
    mOAIVersionGroupApiHandler = handler;
}

void OAIApiRouter::setUpRoutes() {

    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/ability/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIAbilityApiRequest(socket, mOAIAbilityApiHandler);
            reqObj->abilityListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/berry/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIBerryApiRequest(socket, mOAIBerryApiHandler);
            reqObj->berryListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/berry-firmness/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIBerryFirmnessApiRequest(socket, mOAIBerryFirmnessApiHandler);
            reqObj->berryFirmnessListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/berry-flavor/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIBerryFlavorApiRequest(socket, mOAIBerryFlavorApiHandler);
            reqObj->berryFlavorListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/characteristic/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAICharacteristicApiRequest(socket, mOAICharacteristicApiHandler);
            reqObj->characteristicListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/contest-effect/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIContestEffectApiRequest(socket, mOAIContestEffectApiHandler);
            reqObj->contestEffectListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/contest-type/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIContestTypeApiRequest(socket, mOAIContestTypeApiHandler);
            reqObj->contestTypeListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/egg-group/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEggGroupApiRequest(socket, mOAIEggGroupApiHandler);
            reqObj->eggGroupListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/encounter-condition/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEncounterConditionApiRequest(socket, mOAIEncounterConditionApiHandler);
            reqObj->encounterConditionListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/encounter-condition-value/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEncounterConditionValueApiRequest(socket, mOAIEncounterConditionValueApiHandler);
            reqObj->encounterConditionValueListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/encounter-method/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEncounterMethodApiRequest(socket, mOAIEncounterMethodApiHandler);
            reqObj->encounterMethodListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/evolution-chain/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEvolutionChainApiRequest(socket, mOAIEvolutionChainApiHandler);
            reqObj->evolutionChainListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/evolution-trigger/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEvolutionTriggerApiRequest(socket, mOAIEvolutionTriggerApiHandler);
            reqObj->evolutionTriggerListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/gender/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIGenderApiRequest(socket, mOAIGenderApiHandler);
            reqObj->genderListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/generation/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIGenerationApiRequest(socket, mOAIGenerationApiHandler);
            reqObj->generationListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/growth-rate/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIGrowthRateApiRequest(socket, mOAIGrowthRateApiHandler);
            reqObj->growthRateListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/item/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIItemApiRequest(socket, mOAIItemApiHandler);
            reqObj->itemListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/item-attribute/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIItemAttributeApiRequest(socket, mOAIItemAttributeApiHandler);
            reqObj->itemAttributeListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/item-category/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIItemCategoryApiRequest(socket, mOAIItemCategoryApiHandler);
            reqObj->itemCategoryListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/item-fling-effect/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIItemFlingEffectApiRequest(socket, mOAIItemFlingEffectApiHandler);
            reqObj->itemFlingEffectListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/item-pocket/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIItemPocketApiRequest(socket, mOAIItemPocketApiHandler);
            reqObj->itemPocketListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/language/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAILanguageApiRequest(socket, mOAILanguageApiHandler);
            reqObj->languageListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/location/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAILocationApiRequest(socket, mOAILocationApiHandler);
            reqObj->locationListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/location-area/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAILocationAreaApiRequest(socket, mOAILocationAreaApiHandler);
            reqObj->locationAreaListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/machine/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMachineApiRequest(socket, mOAIMachineApiHandler);
            reqObj->machineListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveApiRequest(socket, mOAIMoveApiHandler);
            reqObj->moveListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move-ailment/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveAilmentApiRequest(socket, mOAIMoveAilmentApiHandler);
            reqObj->moveAilmentListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move-battle-style/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveBattleStyleApiRequest(socket, mOAIMoveBattleStyleApiHandler);
            reqObj->moveBattleStyleListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move-category/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveCategoryApiRequest(socket, mOAIMoveCategoryApiHandler);
            reqObj->moveCategoryListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move-damage-class/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveDamageClassApiRequest(socket, mOAIMoveDamageClassApiHandler);
            reqObj->moveDamageClassListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move-learn-method/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveLearnMethodApiRequest(socket, mOAIMoveLearnMethodApiHandler);
            reqObj->moveLearnMethodListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/move-target/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMoveTargetApiRequest(socket, mOAIMoveTargetApiHandler);
            reqObj->moveTargetListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/nature/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAINatureApiRequest(socket, mOAINatureApiHandler);
            reqObj->natureListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pal-park-area/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPalParkAreaApiRequest(socket, mOAIPalParkAreaApiHandler);
            reqObj->palParkAreaListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokeathlon-stat/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokeathlonStatApiRequest(socket, mOAIPokeathlonStatApiHandler);
            reqObj->pokeathlonStatListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokedex/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokedexApiRequest(socket, mOAIPokedexApiHandler);
            reqObj->pokedexListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokemon/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokemonApiRequest(socket, mOAIPokemonApiHandler);
            reqObj->pokemonListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokemon-color/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokemonColorApiRequest(socket, mOAIPokemonColorApiHandler);
            reqObj->pokemonColorListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokemon-form/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokemonFormApiRequest(socket, mOAIPokemonFormApiHandler);
            reqObj->pokemonFormListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokemon-habitat/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokemonHabitatApiRequest(socket, mOAIPokemonHabitatApiHandler);
            reqObj->pokemonHabitatListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokemon-shape/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokemonShapeApiRequest(socket, mOAIPokemonShapeApiHandler);
            reqObj->pokemonShapeListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/pokemon-species/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIPokemonSpeciesApiRequest(socket, mOAIPokemonSpeciesApiHandler);
            reqObj->pokemonSpeciesListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/region/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIRegionApiRequest(socket, mOAIRegionApiHandler);
            reqObj->regionListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/stat/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStatApiRequest(socket, mOAIStatApiHandler);
            reqObj->statListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/super-contest-effect/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAISuperContestEffectApiRequest(socket, mOAISuperContestEffectApiHandler);
            reqObj->superContestEffectListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/type/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAITypeApiRequest(socket, mOAITypeApiHandler);
            reqObj->typeListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/version/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIVersionApiRequest(socket, mOAIVersionApiHandler);
            reqObj->versionListRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v2/version-group/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIVersionGroupApiRequest(socket, mOAIVersionGroupApiHandler);
            reqObj->versionGroupListRequest();
    });
}

void OAIApiRouter::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return;
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
}

bool OAIApiRouter::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAIApiRouter::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/ability/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIAbilityApiRequest(socket, mOAIAbilityApiHandler);
                reqObj->abilityReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/berry/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIBerryApiRequest(socket, mOAIBerryApiHandler);
                reqObj->berryReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/berry-firmness/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIBerryFirmnessApiRequest(socket, mOAIBerryFirmnessApiHandler);
                reqObj->berryFirmnessReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/berry-flavor/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIBerryFlavorApiRequest(socket, mOAIBerryFlavorApiHandler);
                reqObj->berryFlavorReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/characteristic/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAICharacteristicApiRequest(socket, mOAICharacteristicApiHandler);
                reqObj->characteristicReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/contest-effect/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIContestEffectApiRequest(socket, mOAIContestEffectApiHandler);
                reqObj->contestEffectReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/contest-type/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIContestTypeApiRequest(socket, mOAIContestTypeApiHandler);
                reqObj->contestTypeReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/egg-group/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIEggGroupApiRequest(socket, mOAIEggGroupApiHandler);
                reqObj->eggGroupReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/encounter-condition/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIEncounterConditionApiRequest(socket, mOAIEncounterConditionApiHandler);
                reqObj->encounterConditionReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/encounter-condition-value/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIEncounterConditionValueApiRequest(socket, mOAIEncounterConditionValueApiHandler);
                reqObj->encounterConditionValueReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/encounter-method/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIEncounterMethodApiRequest(socket, mOAIEncounterMethodApiHandler);
                reqObj->encounterMethodReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/evolution-chain/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIEvolutionChainApiRequest(socket, mOAIEvolutionChainApiHandler);
                reqObj->evolutionChainReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/evolution-trigger/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIEvolutionTriggerApiRequest(socket, mOAIEvolutionTriggerApiHandler);
                reqObj->evolutionTriggerReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/gender/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIGenderApiRequest(socket, mOAIGenderApiHandler);
                reqObj->genderReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/generation/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIGenerationApiRequest(socket, mOAIGenerationApiHandler);
                reqObj->generationReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/growth-rate/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIGrowthRateApiRequest(socket, mOAIGrowthRateApiHandler);
                reqObj->growthRateReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/item/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIItemApiRequest(socket, mOAIItemApiHandler);
                reqObj->itemReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/item-attribute/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIItemAttributeApiRequest(socket, mOAIItemAttributeApiHandler);
                reqObj->itemAttributeReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/item-category/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIItemCategoryApiRequest(socket, mOAIItemCategoryApiHandler);
                reqObj->itemCategoryReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/item-fling-effect/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIItemFlingEffectApiRequest(socket, mOAIItemFlingEffectApiHandler);
                reqObj->itemFlingEffectReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/item-pocket/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIItemPocketApiRequest(socket, mOAIItemPocketApiHandler);
                reqObj->itemPocketReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/language/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAILanguageApiRequest(socket, mOAILanguageApiHandler);
                reqObj->languageReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/location/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAILocationApiRequest(socket, mOAILocationApiHandler);
                reqObj->locationReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/location-area/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAILocationAreaApiRequest(socket, mOAILocationAreaApiHandler);
                reqObj->locationAreaReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/machine/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMachineApiRequest(socket, mOAIMachineApiHandler);
                reqObj->machineReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveApiRequest(socket, mOAIMoveApiHandler);
                reqObj->moveReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move-ailment/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveAilmentApiRequest(socket, mOAIMoveAilmentApiHandler);
                reqObj->moveAilmentReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move-battle-style/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveBattleStyleApiRequest(socket, mOAIMoveBattleStyleApiHandler);
                reqObj->moveBattleStyleReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move-category/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveCategoryApiRequest(socket, mOAIMoveCategoryApiHandler);
                reqObj->moveCategoryReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move-damage-class/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveDamageClassApiRequest(socket, mOAIMoveDamageClassApiHandler);
                reqObj->moveDamageClassReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move-learn-method/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveLearnMethodApiRequest(socket, mOAIMoveLearnMethodApiHandler);
                reqObj->moveLearnMethodReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/move-target/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIMoveTargetApiRequest(socket, mOAIMoveTargetApiHandler);
                reqObj->moveTargetReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/nature/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAINatureApiRequest(socket, mOAINatureApiHandler);
                reqObj->natureReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pal-park-area/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPalParkAreaApiRequest(socket, mOAIPalParkAreaApiHandler);
                reqObj->palParkAreaReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokeathlon-stat/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokeathlonStatApiRequest(socket, mOAIPokeathlonStatApiHandler);
                reqObj->pokeathlonStatReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokedex/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokedexApiRequest(socket, mOAIPokedexApiHandler);
                reqObj->pokedexReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokemon/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokemonApiRequest(socket, mOAIPokemonApiHandler);
                reqObj->pokemonReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokemon-color/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokemonColorApiRequest(socket, mOAIPokemonColorApiHandler);
                reqObj->pokemonColorReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokemon-form/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokemonFormApiRequest(socket, mOAIPokemonFormApiHandler);
                reqObj->pokemonFormReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokemon-habitat/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokemonHabitatApiRequest(socket, mOAIPokemonHabitatApiHandler);
                reqObj->pokemonHabitatReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokemon-shape/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokemonShapeApiRequest(socket, mOAIPokemonShapeApiHandler);
                reqObj->pokemonShapeReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/pokemon-species/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIPokemonSpeciesApiRequest(socket, mOAIPokemonSpeciesApiHandler);
                reqObj->pokemonSpeciesReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/region/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIRegionApiRequest(socket, mOAIRegionApiHandler);
                reqObj->regionReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/stat/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIStatApiRequest(socket, mOAIStatApiHandler);
                reqObj->statReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/super-contest-effect/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAISuperContestEffectApiRequest(socket, mOAISuperContestEffectApiHandler);
                reqObj->superContestEffectReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/type/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAITypeApiRequest(socket, mOAITypeApiHandler);
                reqObj->typeReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/version/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIVersionApiRequest(socket, mOAIVersionApiHandler);
                reqObj->versionReadRequest(id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v2/version-group/{id}/").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString id = match.captured(QString("id").toLower());
                auto reqObj = new OAIVersionGroupApiRequest(socket, mOAIVersionGroupApiHandler);
                reqObj->versionGroupReadRequest(id);
                return true;
            }
        }
    }
    return false;
}

}
